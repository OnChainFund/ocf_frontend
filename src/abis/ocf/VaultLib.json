{
  "address": "0x8bCe54ff8aB45CB075b044AE117b8fD91F9351aB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_externalPositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasRelayPaymasterFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeReserve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mlnToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mlnBurner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_positionsLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevAccessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextAccessor",
          "type": "address"
        }
      ],
      "name": "AccessorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "AssetManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "AssetManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "externalPosition",
          "type": "address"
        }
      ],
      "name": "ExternalPositionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "externalPosition",
          "type": "address"
        }
      ],
      "name": "ExternalPositionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "FreelyTransferableSharesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevMigrator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextMigrator",
          "type": "address"
        }
      ],
      "name": "MigratorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nominatedOwner",
          "type": "address"
        }
      ],
      "name": "NominatedOwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nominatedOwner",
          "type": "address"
        }
      ],
      "name": "NominatedOwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextOwner",
          "type": "address"
        }
      ],
      "name": "OwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nextOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeePaidInShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mlnValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mlnBurned",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeSharesBoughtBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "SymbolSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "TrackedAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "TrackedAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevVaultLib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextVaultLib",
          "type": "address"
        }
      ],
      "name": "VaultLibSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_managers",
          "type": "address[]"
        }
      ],
      "name": "addAssetManagers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "addTrackedAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharesAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mlnValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gav",
          "type": "uint256"
        }
      ],
      "name": "buyBackProtocolFeeShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "callOnContract",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "returnData_",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "canManageAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canManageAssets_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "canMigrate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canMigrate_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "canRelayCalls",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canRelayCalls_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccessor",
      "outputs": [
        {
          "internalType": "address",
          "name": "accessor_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveExternalPositions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "activeExternalPositions_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_typeId",
          "type": "uint256"
        }
      ],
      "name": "getExternalPositionLibForType",
      "outputs": [
        {
          "internalType": "address",
          "name": "externalPositionLib_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExternalPositionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "externalPositionManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasRelayPaymasterFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "gasRelayPaymasterFactory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasRelayTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMigrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "migrator_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMlnBurner",
      "outputs": [
        {
          "internalType": "address",
          "name": "mlnBurner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMlnToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "mlnToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "nominatedOwner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionsLimit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeReserve",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolFeeReserve_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProtocolFeeTracker",
      "outputs": [
        {
          "internalType": "address",
          "name": "protocolFeeTracker_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrackedAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "trackedAssets_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultLib_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accessor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_fundName",
          "type": "string"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_externalPosition",
          "type": "address"
        }
      ],
      "name": "isActiveExternalPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActiveExternalPosition_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "isAssetManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAssetManager_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isTrackedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isTrackedAsset_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "uuid_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IVault.VaultAction",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        }
      ],
      "name": "receiveValidatedVaultAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_managers",
          "type": "address[]"
        }
      ],
      "name": "removeAssetManagers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeNominatedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextAccessor",
          "type": "address"
        }
      ],
      "name": "setAccessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextAccessor",
          "type": "address"
        }
      ],
      "name": "setAccessorForFundReconfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setFreelyTransferableShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextMigrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nextName",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextNominatedOwner",
          "type": "address"
        }
      ],
      "name": "setNominatedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nextSymbol",
          "type": "string"
        }
      ],
      "name": "setSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextVaultLib",
          "type": "address"
        }
      ],
      "name": "setVaultLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesAreFreelyTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "sharesAreFreelyTransferable_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAssetTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x01a0e019b21f9407b2dd3fd13297e3fcb47a7016cf3e6ee91c23b9662ee375be",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8bCe54ff8aB45CB075b044AE117b8fD91F9351aB",
    "transactionIndex": 0,
    "gasUsed": "4263642",
    "logsBloom": "0x
    "blockHash": "0x709a4c5b03055d4514630b83faff656632e80abac0ecb8351aedd41f0850cfaf",
    "transactionHash": "0x01a0e019b21f9407b2dd3fd13297e3fcb47a7016cf3e6ee91c23b9662ee375be",
    "logs": [],
    "blockNumber": 16871568,
    "cumulativeGasUsed": "4263642",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x99dBE4AEa58E518C50a1c04aE9b48C9F6354612f",
    "0x38a024C0b412B9d1db8BC398140D00F5Af3093D4",
    "0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923",
    "0xB377a2EeD7566Ac9fCb0BA673604F9BF875e2Bab",
    "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
    "0x0000000000000000000000000000000000000000",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    20
  ],
  "numDeployments": 1,
  "solcInputHash": "df8f8cb2f868beceb0b2a2217fd9c002",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasRelayPaymasterFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mlnToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mlnBurner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionsLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAccessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextAccessor\",\"type\":\"address\"}],\"name\":\"AccessorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AssetManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AssetManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"externalPosition\",\"type\":\"address\"}],\"name\":\"ExternalPositionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"externalPosition\",\"type\":\"address\"}],\"name\":\"ExternalPositionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FreelyTransferableSharesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevMigrator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextMigrator\",\"type\":\"address\"}],\"name\":\"MigratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"NominatedOwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"NominatedOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeePaidInShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mlnValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mlnBurned\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeSharesBoughtBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"SymbolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"TrackedAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"TrackedAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevVaultLib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextVaultLib\",\"type\":\"address\"}],\"name\":\"VaultLibSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"addAssetManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"addTrackedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mlnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gav\",\"type\":\"uint256\"}],\"name\":\"buyBackProtocolFeeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"callOnContract\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"canManageAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canManageAssets_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"canMigrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canMigrate_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"canRelayCalls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canRelayCalls_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"accessor_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveExternalPositions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"activeExternalPositions_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeId\",\"type\":\"uint256\"}],\"name\":\"getExternalPositionLibForType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"externalPositionLib_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExternalPositionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"externalPositionManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasRelayPaymasterFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gasRelayPaymasterFactory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasRelayTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMigrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"migrator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMlnBurner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mlnBurner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMlnToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mlnToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nominatedOwner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionsLimit_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeReserve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeReserve_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"protocolFeeTracker_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrackedAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"trackedAssets_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultLib_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_fundName\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalPosition\",\"type\":\"address\"}],\"name\":\"isActiveExternalPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActiveExternalPosition_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isAssetManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAssetManager_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isTrackedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrackedAsset_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.VaultAction\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"receiveValidatedVaultAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_managers\",\"type\":\"address[]\"}],\"name\":\"removeAssetManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeNominatedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextAccessor\",\"type\":\"address\"}],\"name\":\"setAccessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextAccessor\",\"type\":\"address\"}],\"name\":\"setAccessorForFundReconfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFreelyTransferableShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextMigrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nextName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextNominatedOwner\",\"type\":\"address\"}],\"name\":\"setNominatedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nextSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextVaultLib\",\"type\":\"address\"}],\"name\":\"setVaultLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesAreFreelyTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sharesAreFreelyTransferable_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAssetTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"The difference in terminology between \\\"asset\\\" and \\\"trackedAsset\\\" is intentional. A fund might actually have asset balances of un-tracked assets, but only tracked assets are used in gav calculations. Note that this contract inherits VaultLibSafeMath (a verbatim Open Zeppelin SafeMath copy) from SharesTokenBase via VaultLibBase2\",\"kind\":\"dev\",\"methods\":{\"addAssetManagers(address[])\":{\"params\":{\"_managers\":\"The accounts to add as asset managers\"}},\"addTrackedAsset(address)\":{\"params\":{\"_asset\":\"The asset to add as a tracked asset\"}},\"allowance(address,address)\":{\"details\":\"Standard implementation of ERC20's allowance(). Can be overridden.\"},\"approve(address,uint256)\":{\"details\":\"Standard implementation of ERC20's approve(). Can be overridden.\"},\"balanceOf(address)\":{\"details\":\"Standard implementation of ERC20's balanceOf(). Can be overridden.\"},\"burnShares(address,uint256)\":{\"params\":{\"_amount\":\"The amount of shares to burn\",\"_target\":\"The account for which to burn shares\"}},\"buyBackProtocolFeeShares(uint256,uint256,uint256)\":{\"details\":\"Since the vault controls both the MLN to burn and the admin function to burn any user's fund shares, there is no need to transfer assets back-and-forth with the ProtocolFeeReserve. We only need to know the correct discounted amount of MLN to burn.\",\"params\":{\"_gav\":\"The total fund GAV\",\"_mlnValue\":\"The MLN-denominated market value of _sharesAmount\",\"_sharesAmount\":\"The amount of shares to buy back\"}},\"callOnContract(address,bytes)\":{\"params\":{\"_callData\":\"The call data for the call\",\"_contract\":\"The contract to call\"},\"returns\":{\"returnData_\":\"The data returned by the call\"}},\"canManageAssets(address)\":{\"params\":{\"_who\":\"The account to check\"},\"returns\":{\"canManageAssets_\":\"True if the account can manage assets\"}},\"canMigrate(address)\":{\"params\":{\"_who\":\"The account to check\"},\"returns\":{\"canMigrate_\":\"True if the account is allowed to migrate the VaultProxy\"}},\"canRelayCalls(address)\":{\"params\":{\"_who\":\"The account to check\"},\"returns\":{\"canRelayCalls_\":\"True if the account can use gas relaying on this fund\"}},\"decimals()\":{\"details\":\"Standard implementation of ERC20's decimals(). Can not be overridden.\"},\"getAccessor()\":{\"returns\":{\"accessor_\":\"The `accessor` variable value\"}},\"getActiveExternalPositions()\":{\"returns\":{\"activeExternalPositions_\":\"The `activeExternalPositions` variable value\"}},\"getCreator()\":{\"returns\":{\"creator_\":\"The `creator` variable value\"}},\"getExternalPositionLibForType(uint256)\":{\"params\":{\"_typeId\":\"The type for which to get the external position library\"},\"returns\":{\"externalPositionLib_\":\"The external position library\"}},\"getExternalPositionManager()\":{\"returns\":{\"externalPositionManager_\":\"The `EXTERNAL_POSITION_MANAGER` variable value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The fund deployer contract associated with this vault\"}},\"getGasRelayPaymasterFactory()\":{\"returns\":{\"gasRelayPaymasterFactory_\":\"The `GAS_RELAY_PAYMASTER_FACTORY` variable value\"}},\"getGasRelayTrustedForwarder()\":{\"returns\":{\"trustedForwarder_\":\"The trusted forwarder\"}},\"getMigrator()\":{\"returns\":{\"migrator_\":\"The `migrator` variable value\"}},\"getMlnBurner()\":{\"returns\":{\"mlnBurner_\":\"The `MLN_BURNER` variable value\"}},\"getMlnToken()\":{\"returns\":{\"mlnToken_\":\"The `MLN_TOKEN` variable value\"}},\"getNominatedOwner()\":{\"returns\":{\"nominatedOwner_\":\"The account that is nominated to be the owner\"}},\"getOwner()\":{\"returns\":{\"owner_\":\"The `owner` variable value\"}},\"getPositionsLimit()\":{\"returns\":{\"positionsLimit_\":\"The `POSITIONS_LIMIT` variable value\"}},\"getProtocolFeeReserve()\":{\"returns\":{\"protocolFeeReserve_\":\"The `PROTOCOL_FEE_RESERVE` variable value\"}},\"getProtocolFeeTracker()\":{\"returns\":{\"protocolFeeTracker_\":\"The `PROTOCOL_FEE_TRACKER` variable value\"}},\"getTrackedAssets()\":{\"returns\":{\"trackedAssets_\":\"The `trackedAssets` variable value\"}},\"getVaultLib()\":{\"returns\":{\"vaultLib_\":\"The address of the VaultLib target\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}},\"init(address,address,string)\":{\"details\":\"Serves as a per-proxy pseudo-constructor\",\"params\":{\"_accessor\":\"The address to set as the permissioned accessor of the VaultLib\",\"_fundName\":\"The name of the fund\",\"_owner\":\"The address to set as the fund owner\"}},\"isActiveExternalPosition(address)\":{\"params\":{\"_externalPosition\":\"The externalPosition to check\"},\"returns\":{\"isActiveExternalPosition_\":\"True if the address is an active external position on the vault\"}},\"isAssetManager(address)\":{\"params\":{\"_who\":\"The account to check\"},\"returns\":{\"isAssetManager_\":\"True if the account is an allowed asset manager\"}},\"isTrackedAsset(address)\":{\"params\":{\"_asset\":\"The address to check\"},\"returns\":{\"isTrackedAsset_\":\"True if the address is a tracked asset\"}},\"mintShares(address,uint256)\":{\"params\":{\"_amount\":\"The amount of shares to mint\",\"_target\":\"The account for which to burn shares\"}},\"name()\":{\"details\":\"Standard implementation of ERC20's name(). Can be overridden.\"},\"proxiableUUID()\":{\"details\":\"The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`\",\"returns\":{\"uuid_\":\"The bytes32 hash representing the UUID\"}},\"receiveValidatedVaultAction(uint8,bytes)\":{\"params\":{\"_action\":\"The VaultAction to perform\",\"_actionData\":\"The call data for the action to perform\"}},\"removeAssetManagers(address[])\":{\"params\":{\"_managers\":\"The accounts to remove as asset managers\"}},\"setAccessor(address)\":{\"params\":{\"_nextAccessor\":\"The address to set as the permissioned accessor of the VaultLib\"}},\"setAccessorForFundReconfiguration(address)\":{\"params\":{\"_nextAccessor\":\"The next accessor\"}},\"setFreelyTransferableShares()\":{\"details\":\"Once set, this can never be allowed to be unset, as it provides a critical transferability guarantee to liquidity pools and other smart contract holders that rely on transfers to function properly. Enabling this option will skip all policies run upon transferring shares, but will still respect the shares action timelock.\"},\"setMigrator(address)\":{\"details\":\"Set to address(0) to remove the migrator.\",\"params\":{\"_nextMigrator\":\"The account to set as the allowed migrator\"}},\"setName(string)\":{\"details\":\"Owners should consider the implications of changing an ERC20 name post-deployment, e.g., some apps/dapps may cache token names for display purposes, so changing the name in contract state may not be reflected in third party applications as desired.\",\"params\":{\"_nextName\":\"The next name value\"}},\"setNominatedOwner(address)\":{\"details\":\"Does not prohibit overwriting the current nominatedOwner\",\"params\":{\"_nextNominatedOwner\":\"The account to nominate\"}},\"setSymbol(string)\":{\"details\":\"Owners should consider the implications of changing an ERC20 symbol post-deployment, e.g., some apps/dapps may cache token symbols for display purposes, so changing the symbol in contract state may not be reflected in third party applications as desired. Only callable by the FundDeployer during vault creation or by the vault owner.\",\"params\":{\"_nextSymbol\":\"The next symbol value\"}},\"setVaultLib(address)\":{\"details\":\"This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextVaultLib from being the same as the current VaultLib\",\"params\":{\"_nextVaultLib\":\"The address to set as the VaultLib\"}},\"sharesAreFreelyTransferable()\":{\"returns\":{\"sharesAreFreelyTransferable_\":\"True if shares are (permanently) freely transferable\"}},\"symbol()\":{\"details\":\"Defers the shares symbol value to the Dispatcher contract if not set locally\",\"returns\":{\"symbol_\":\"The `symbol` value\"}},\"totalSupply()\":{\"details\":\"Standard implementation of ERC20's totalSupply(). Can be overridden.\"},\"transfer(address,uint256)\":{\"details\":\"Standard implementation of ERC20's transfer(). Overridden to allow arbitrary logic in ComptrollerProxy prior to transfer.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Standard implementation of ERC20's transferFrom(). Overridden to allow arbitrary logic in ComptrollerProxy prior to transfer.\"},\"transferShares(address,address,uint256)\":{\"details\":\"For protocol use only, all other transfers should operate via standard ERC20 functions\",\"params\":{\"_amount\":\"The amount of shares to transfer\",\"_from\":\"The account from which to transfer shares\",\"_to\":\"The account to which to transfer shares\"}},\"withdrawAssetTo(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of asset to withdraw\",\"_asset\":\"The asset to withdraw\",\"_target\":\"The account to which to withdraw the asset\"}}},\"title\":\"VaultLib Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAssetManagers(address[])\":{\"notice\":\"Registers accounts that can manage vault holdings within the protocol\"},\"addTrackedAsset(address)\":{\"notice\":\"Adds a tracked asset\"},\"burnShares(address,uint256)\":{\"notice\":\"Burns fund shares from a particular account\"},\"buyBackProtocolFeeShares(uint256,uint256,uint256)\":{\"notice\":\"Buys back shares collected as protocol fee at a discounted shares price, using MLN\"},\"callOnContract(address,bytes)\":{\"notice\":\"Makes an arbitrary call with this contract as the sender\"},\"canManageAssets(address)\":{\"notice\":\"Checks whether an account can manage assets\"},\"canMigrate(address)\":{\"notice\":\"Checks whether an account is allowed to migrate the VaultProxy\"},\"canRelayCalls(address)\":{\"notice\":\"Checks whether an account can use gas relaying\"},\"claimOwnership()\":{\"notice\":\"Claim ownership of the contract\"},\"getAccessor()\":{\"notice\":\"Gets the `accessor` variable\"},\"getActiveExternalPositions()\":{\"notice\":\"Gets the `activeExternalPositions` variable\"},\"getCreator()\":{\"notice\":\"Gets the `creator` variable\"},\"getExternalPositionLibForType(uint256)\":{\"notice\":\"Gets the external position library contract for a given type\"},\"getExternalPositionManager()\":{\"notice\":\"Gets the `EXTERNAL_POSITION_MANAGER` variable\"},\"getFundDeployer()\":{\"notice\":\"Gets the vaults fund deployer\"},\"getGasRelayPaymasterFactory()\":{\"notice\":\"Gets the `GAS_RELAY_PAYMASTER_FACTORY` variable\"},\"getGasRelayTrustedForwarder()\":{\"notice\":\"Gets the trusted forwarder for GSN relaying\"},\"getMigrator()\":{\"notice\":\"Gets the `migrator` variable\"},\"getMlnBurner()\":{\"notice\":\"Gets the `MLN_BURNER` variable\"},\"getMlnToken()\":{\"notice\":\"Gets the `MLN_TOKEN` variable\"},\"getNominatedOwner()\":{\"notice\":\"Gets the account that is nominated to be the next owner of this contract\"},\"getOwner()\":{\"notice\":\"Gets the `owner` variable\"},\"getPositionsLimit()\":{\"notice\":\"Gets the `POSITIONS_LIMIT` variable\"},\"getProtocolFeeReserve()\":{\"notice\":\"Gets the `PROTOCOL_FEE_RESERVE` variable\"},\"getProtocolFeeTracker()\":{\"notice\":\"Gets the `PROTOCOL_FEE_TRACKER` variable\"},\"getTrackedAssets()\":{\"notice\":\"Gets the `trackedAssets` variable\"},\"getVaultLib()\":{\"notice\":\"Gets the VaultLib target for the VaultProxy\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable\"},\"init(address,address,string)\":{\"notice\":\"Initializes the VaultProxy with core configuration\"},\"isActiveExternalPosition(address)\":{\"notice\":\"Check whether an external position is active on the vault\"},\"isAssetManager(address)\":{\"notice\":\"Checks whether an account is an allowed asset manager\"},\"isTrackedAsset(address)\":{\"notice\":\"Checks whether an address is a tracked asset of the vault\"},\"mintShares(address,uint256)\":{\"notice\":\"Mints fund shares to a particular account\"},\"payProtocolFee()\":{\"notice\":\"Pays the due protocol fee by minting shares to the ProtocolFeeReserve\"},\"proxiableUUID()\":{\"notice\":\"Returns a unique bytes32 hash for VaultLib instances\"},\"receiveValidatedVaultAction(uint8,bytes)\":{\"notice\":\"Dispatches a call initiated from an Extension, validated by the ComptrollerProxy\"},\"removeAssetManagers(address[])\":{\"notice\":\"Deregisters accounts that can manage vault holdings within the protocol\"},\"removeNominatedOwner()\":{\"notice\":\"Revoke the nomination of a new contract owner\"},\"setAccessor(address)\":{\"notice\":\"Sets the permissioned accessor of the VaultLib\"},\"setAccessorForFundReconfiguration(address)\":{\"notice\":\"Updates the accessor during a config change within this release\"},\"setFreelyTransferableShares()\":{\"notice\":\"Sets shares as (permanently) freely transferable\"},\"setMigrator(address)\":{\"notice\":\"Sets the account that is allowed to migrate a fund to new releases\"},\"setName(string)\":{\"notice\":\"Sets the shares name\"},\"setNominatedOwner(address)\":{\"notice\":\"Nominate a new contract owner\"},\"setSymbol(string)\":{\"notice\":\"Sets the shares token symbol\"},\"setVaultLib(address)\":{\"notice\":\"Sets the VaultLib target for the VaultProxy\"},\"sharesAreFreelyTransferable()\":{\"notice\":\"Checks whether shares are (permanently) freely transferable\"},\"symbol()\":{\"notice\":\"Gets the `symbol` value of the shares token\"},\"transferShares(address,address,uint256)\":{\"notice\":\"Transfers fund shares from one account to another\"},\"withdrawAssetTo(address,address,uint256)\":{\"notice\":\"Withdraws an asset from the VaultProxy to a given account\"}},\"notice\":\"The per-release proxiable library contract for VaultProxy\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/core/fund/vault/VaultLib.sol\":\"VaultLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"},\"contracts/persistent/external-positions/IExternalPosition.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition {\\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function init(bytes memory) external;\\n\\n    function receiveCallFromVault(bytes memory) external;\\n}\\n\",\"keccak256\":\"0x00e6ea9721e5fd1e72215e4c744306097d7f8b1a834cced5d65a17a924f750ad\",\"license\":\"GPL-3.0\"},\"contracts/persistent/protocol-fee-reserve/interfaces/IProtocolFeeReserve1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IProtocolFeeReserve1 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev Each interface should inherit the previous interface,\\n/// e.g., `IProtocolFeeReserve2 is IProtocolFeeReserve1`\\ninterface IProtocolFeeReserve1 {\\n    function buyBackSharesViaTrustedVaultProxy(\\n        uint256 _sharesAmount,\\n        uint256 _mlnValue,\\n        uint256 _gav\\n    ) external returns (uint256 mlnAmountToBurn_);\\n}\\n\",\"keccak256\":\"0x2728878c423db523bc95189137e8c58d2d7db9f56bbd5c6b1f988c08b551fbab\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/VaultLibBase1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./VaultLibBaseCore.sol\\\";\\n\\n/// @title VaultLibBase1 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The first implementation of VaultLibBaseCore, with additional events and storage\\n/// @dev All subsequent implementations should inherit the previous implementation,\\n/// e.g., `VaultLibBase2 is VaultLibBase1`\\n/// DO NOT EDIT CONTRACT.\\nabstract contract VaultLibBase1 is VaultLibBaseCore {\\n    event AssetWithdrawn(address indexed asset, address indexed target, uint256 amount);\\n\\n    event TrackedAssetAdded(address asset);\\n\\n    event TrackedAssetRemoved(address asset);\\n\\n    address[] internal trackedAssets;\\n    mapping(address => bool) internal assetToIsTracked;\\n}\\n\",\"keccak256\":\"0xa4dac1e4cdb311a2ab187135355357d8790c505ef36dd912c057fe53743d30b5\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/VaultLibBase2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./VaultLibBase1.sol\\\";\\n\\n/// @title VaultLibBase2 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The first implementation of VaultLibBase1, with additional events and storage\\n/// @dev All subsequent implementations should inherit the previous implementation,\\n/// e.g., `VaultLibBase2 is VaultLibBase1`\\n/// DO NOT EDIT CONTRACT.\\nabstract contract VaultLibBase2 is VaultLibBase1 {\\n    event AssetManagerAdded(address manager);\\n\\n    event AssetManagerRemoved(address manager);\\n\\n    event EthReceived(address indexed sender, uint256 amount);\\n\\n    event ExternalPositionAdded(address indexed externalPosition);\\n\\n    event ExternalPositionRemoved(address indexed externalPosition);\\n\\n    event FreelyTransferableSharesSet();\\n\\n    event NameSet(string name);\\n\\n    event NominatedOwnerRemoved(address indexed nominatedOwner);\\n\\n    event NominatedOwnerSet(address indexed nominatedOwner);\\n\\n    event ProtocolFeePaidInShares(uint256 sharesAmount);\\n\\n    event ProtocolFeeSharesBoughtBack(uint256 sharesAmount, uint256 mlnValue, uint256 mlnBurned);\\n\\n    event OwnershipTransferred(address indexed prevOwner, address indexed nextOwner);\\n\\n    event SymbolSet(string symbol);\\n\\n    // In order to make transferability guarantees to liquidity pools and other smart contracts\\n    // that hold/treat shares as generic ERC20 tokens, a permanent guarantee on transferability\\n    // is required. Once set as `true`, freelyTransferableShares should never be unset.\\n    bool internal freelyTransferableShares;\\n    address internal nominatedOwner;\\n    address[] internal activeExternalPositions;\\n    mapping(address => bool) internal accountToIsAssetManager;\\n    mapping(address => bool) internal externalPositionToIsActive;\\n}\\n\",\"keccak256\":\"0xf7d31f2a9a47770ed3f444be2c4fe9262ddb55fef7f25e546b1f03c9afec4c09\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/VaultLibBaseCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./interfaces/IMigratableVault.sol\\\";\\nimport \\\"./utils/ProxiableVaultLib.sol\\\";\\nimport \\\"./utils/SharesTokenBase.sol\\\";\\n\\n/// @title VaultLibBaseCore Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A persistent contract containing all required storage variables and\\n/// required functions for a VaultLib implementation\\n/// @dev DO NOT EDIT CONTRACT. If new events or storage are necessary, they should be added to\\n/// a numbered VaultLibBaseXXX that inherits the previous base. See VaultLibBase1.\\nabstract contract VaultLibBaseCore is IMigratableVault, ProxiableVaultLib, SharesTokenBase {\\n    event AccessorSet(address prevAccessor, address nextAccessor);\\n\\n    event MigratorSet(address prevMigrator, address nextMigrator);\\n\\n    event OwnerSet(address prevOwner, address nextOwner);\\n\\n    event VaultLibSet(address prevVaultLib, address nextVaultLib);\\n\\n    address internal accessor;\\n    address internal creator;\\n    address internal migrator;\\n    address internal owner;\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Initializes the VaultProxy with core configuration\\n    /// @param _owner The address to set as the fund owner\\n    /// @param _accessor The address to set as the permissioned accessor of the VaultLib\\n    /// @param _fundName The name of the fund\\n    /// @dev Serves as a per-proxy pseudo-constructor\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external override {\\n        require(creator == address(0), \\\"init: Proxy already initialized\\\");\\n        creator = msg.sender;\\n        sharesName = _fundName;\\n\\n        __setAccessor(_accessor);\\n        __setOwner(_owner);\\n\\n        emit VaultLibSet(address(0), getVaultLib());\\n    }\\n\\n    /// @notice Sets the permissioned accessor of the VaultLib\\n    /// @param _nextAccessor The address to set as the permissioned accessor of the VaultLib\\n    function setAccessor(address _nextAccessor) external override {\\n        require(msg.sender == creator, \\\"setAccessor: Only callable by the contract creator\\\");\\n\\n        __setAccessor(_nextAccessor);\\n    }\\n\\n    /// @notice Sets the VaultLib target for the VaultProxy\\n    /// @param _nextVaultLib The address to set as the VaultLib\\n    /// @dev This function is absolutely critical. __updateCodeAddress() validates that the\\n    /// target is a valid Proxiable contract instance.\\n    /// Does not block _nextVaultLib from being the same as the current VaultLib\\n    function setVaultLib(address _nextVaultLib) external override {\\n        require(msg.sender == creator, \\\"setVaultLib: Only callable by the contract creator\\\");\\n\\n        address prevVaultLib = getVaultLib();\\n\\n        __updateCodeAddress(_nextVaultLib);\\n\\n        emit VaultLibSet(prevVaultLib, _nextVaultLib);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Checks whether an account is allowed to migrate the VaultProxy\\n    /// @param _who The account to check\\n    /// @return canMigrate_ True if the account is allowed to migrate the VaultProxy\\n    function canMigrate(address _who) public view virtual override returns (bool canMigrate_) {\\n        return _who == owner || _who == migrator;\\n    }\\n\\n    /// @notice Gets the VaultLib target for the VaultProxy\\n    /// @return vaultLib_ The address of the VaultLib target\\n    function getVaultLib() public view returns (address vaultLib_) {\\n        assembly {\\n            // solium-disable-line\\n            vaultLib_ := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\n        }\\n        return vaultLib_;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper to set the permissioned accessor of the VaultProxy.\\n    /// Does not prevent the prevAccessor from being the _nextAccessor.\\n    function __setAccessor(address _nextAccessor) internal {\\n        require(_nextAccessor != address(0), \\\"__setAccessor: _nextAccessor cannot be empty\\\");\\n        address prevAccessor = accessor;\\n\\n        accessor = _nextAccessor;\\n\\n        emit AccessorSet(prevAccessor, _nextAccessor);\\n    }\\n\\n    /// @dev Helper to set the owner of the VaultProxy\\n    function __setOwner(address _nextOwner) internal {\\n        require(_nextOwner != address(0), \\\"__setOwner: _nextOwner cannot be empty\\\");\\n        address prevOwner = owner;\\n        require(_nextOwner != prevOwner, \\\"__setOwner: _nextOwner is the current owner\\\");\\n\\n        owner = _nextOwner;\\n\\n        emit OwnerSet(prevOwner, _nextOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc518a9735a8145f064817fa21c1cc57eba7d3396a06320b7abde187b87613074\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IExternalPositionVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionVault interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\\ninterface IExternalPositionVault {\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c047551a9bab8cb84299c4cf17d0435f1d4d0791ecc1d03e0d55cb3450baad6\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFreelyTransferableSharesVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Provides the interface for determining whether a vault's shares\\n/// are guaranteed to be freely transferable.\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IFreelyTransferableSharesVault {\\n    function sharesAreFreelyTransferable()\\n        external\\n        view\\n        returns (bool sharesAreFreelyTransferable_);\\n}\\n\",\"keccak256\":\"0xe31f063493e6e3a4434eaa5629c0a706b8fa0569aff3f4ef9d62e27a1928cfa0\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\",\"keccak256\":\"0x8e1355a7efa8ec2172f5c9b532071def392b86ab1e5534d2fc73417a6e9f7238\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/utils/ProxiableVaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ProxiableVaultLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A contract that defines the upgrade behavior for VaultLib instances\\n/// @dev The recommended implementation of the target of a proxy according to EIP-1822 and EIP-1967\\n/// Code position in storage is `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`,\\n/// which is \\\"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\\".\\nabstract contract ProxiableVaultLib {\\n    /// @dev Updates the target of the proxy to be the contract at _nextVaultLib\\n    function __updateCodeAddress(address _nextVaultLib) internal {\\n        require(\\n            bytes32(0x027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a5) ==\\n                ProxiableVaultLib(_nextVaultLib).proxiableUUID(),\\n            \\\"__updateCodeAddress: _nextVaultLib not compatible\\\"\\n        );\\n        assembly {\\n            // solium-disable-line\\n            sstore(\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\\n                _nextVaultLib\\n            )\\n        }\\n    }\\n\\n    /// @notice Returns a unique bytes32 hash for VaultLib instances\\n    /// @return uuid_ The bytes32 hash representing the UUID\\n    /// @dev The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`\\n    function proxiableUUID() public pure returns (bytes32 uuid_) {\\n        return 0x027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a5;\\n    }\\n}\\n\",\"keccak256\":\"0x47123e1fd95e335b312d378e651a627a674f32df372bcfe36c1128ab91122f76\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/utils/SharesTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./VaultLibSafeMath.sol\\\";\\n\\n/// @title StandardERC20 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Contains the storage, events, and default logic of an ERC20-compliant contract.\\n/// @dev The logic can be overridden by VaultLib implementations.\\n/// Adapted from OpenZeppelin 3.2.0.\\n/// DO NOT EDIT THIS CONTRACT.\\nabstract contract SharesTokenBase {\\n    using VaultLibSafeMath for uint256;\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    string internal sharesName;\\n    string internal sharesSymbol;\\n    uint256 internal sharesTotalSupply;\\n    mapping(address => uint256) internal sharesBalances;\\n    mapping(address => mapping(address => uint256)) internal sharesAllowances;\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @dev Standard implementation of ERC20's approve(). Can be overridden.\\n    function approve(address _spender, uint256 _amount) public virtual returns (bool) {\\n        __approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev Standard implementation of ERC20's transfer(). Can be overridden.\\n    function transfer(address _recipient, uint256 _amount) public virtual returns (bool) {\\n        __transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /// @dev Standard implementation of ERC20's transferFrom(). Can be overridden.\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public virtual returns (bool) {\\n        __transfer(_sender, _recipient, _amount);\\n        __approve(\\n            _sender,\\n            msg.sender,\\n            sharesAllowances[_sender][msg.sender].sub(\\n                _amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    // EXTERNAL FUNCTIONS - VIEW\\n\\n    /// @dev Standard implementation of ERC20's allowance(). Can be overridden.\\n    function allowance(address _owner, address _spender) public view virtual returns (uint256) {\\n        return sharesAllowances[_owner][_spender];\\n    }\\n\\n    /// @dev Standard implementation of ERC20's balanceOf(). Can be overridden.\\n    function balanceOf(address _account) public view virtual returns (uint256) {\\n        return sharesBalances[_account];\\n    }\\n\\n    /// @dev Standard implementation of ERC20's decimals(). Can not be overridden.\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @dev Standard implementation of ERC20's name(). Can be overridden.\\n    function name() public view virtual returns (string memory) {\\n        return sharesName;\\n    }\\n\\n    /// @dev Standard implementation of ERC20's symbol(). Can be overridden.\\n    function symbol() public view virtual returns (string memory) {\\n        return sharesSymbol;\\n    }\\n\\n    /// @dev Standard implementation of ERC20's totalSupply(). Can be overridden.\\n    function totalSupply() public view virtual returns (uint256) {\\n        return sharesTotalSupply;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper for approve(). Can be overridden.\\n    function __approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        sharesAllowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    /// @dev Helper to burn tokens from an account. Can be overridden.\\n    function __burn(address _account, uint256 _amount) internal virtual {\\n        require(_account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        sharesBalances[_account] = sharesBalances[_account].sub(\\n            _amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        sharesTotalSupply = sharesTotalSupply.sub(_amount);\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /// @dev Helper to mint tokens to an account. Can be overridden.\\n    function __mint(address _account, uint256 _amount) internal virtual {\\n        require(_account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        sharesTotalSupply = sharesTotalSupply.add(_amount);\\n        sharesBalances[_account] = sharesBalances[_account].add(_amount);\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /// @dev Helper to transfer tokens between accounts. Can be overridden.\\n    function __transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal virtual {\\n        require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        sharesBalances[_sender] = sharesBalances[_sender].sub(\\n            _amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        sharesBalances[_recipient] = sharesBalances[_recipient].add(_amount);\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9b2a431aea5f0b908cc8c169c89ed420b52fb5f63cca40e97a9223209c0b1113\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/utils/VaultLibSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title VaultLibSafeMath library\\n/// @notice A narrowed, verbatim implementation of OpenZeppelin 3.2.0 SafeMath\\n/// for use with VaultLib\\n/// @dev Preferred to importing from npm to guarantee consistent logic and revert reasons\\n/// between VaultLib implementations\\n/// DO NOT EDIT THIS CONTRACT\\nlibrary VaultLibSafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"VaultLibSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"VaultLibSafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"VaultLibSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"VaultLibSafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"VaultLibSafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xc056fcbf5f498fea6a12ae7f470bb4246297355c3117b1bd01d0edf207da947d\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    function activate(bool) external;\\n\\n    function calcGav() external returns (uint256);\\n\\n    function calcGrossShareValue() external returns (uint256);\\n\\n    function callOnExtension(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n\\n    function destructActivated(uint256, uint256) external;\\n\\n    function destructUnactivated() external;\\n\\n    function getDenominationAsset() external view returns (address);\\n\\n    function getExternalPositionManager() external view returns (address);\\n\\n    function getFeeManager() external view returns (address);\\n\\n    function getFundDeployer() external view returns (address);\\n\\n    function getGasRelayPaymaster() external view returns (address);\\n\\n    function getIntegrationManager() external view returns (address);\\n\\n    function getPolicyManager() external view returns (address);\\n\\n    function getVaultProxy() external view returns (address);\\n\\n    function init(address, uint256) external;\\n\\n    function permissionedVaultAction(IVault.VaultAction, bytes calldata) external;\\n\\n    function preTransferSharesHook(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function preTransferSharesHookFreelyTransferable(address) external view;\\n\\n    function setGasRelayPaymaster(address) external;\\n\\n    function setVaultProxy(address) external;\\n}\\n\",\"keccak256\":\"0x51d4a60ba37b5f9198ef1328e08ff45efe0dee76bc067d71ed98f3a221c3636f\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../persistent/vault/interfaces/IExternalPositionVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IMigratableVault.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IMigratableVault, IFreelyTransferableSharesVault, IExternalPositionVault {\\n    enum VaultAction {\\n        None,\\n        // Shares management\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        // Asset management\\n        AddTrackedAsset,\\n        ApproveAssetSpender,\\n        RemoveTrackedAsset,\\n        WithdrawAssetTo,\\n        // External position management\\n        AddExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition\\n    }\\n\\n    function addTrackedAsset(address) external;\\n\\n    function burnShares(address, uint256) external;\\n\\n    function buyBackProtocolFeeShares(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function callOnContract(address, bytes calldata) external returns (bytes memory);\\n\\n    function canManageAssets(address) external view returns (bool);\\n\\n    function canRelayCalls(address) external view returns (bool);\\n\\n    function getAccessor() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n\\n    function getActiveExternalPositions() external view returns (address[] memory);\\n\\n    function getTrackedAssets() external view returns (address[] memory);\\n\\n    function isActiveExternalPosition(address) external view returns (bool);\\n\\n    function isTrackedAsset(address) external view returns (bool);\\n\\n    function mintShares(address, uint256) external;\\n\\n    function payProtocolFee() external;\\n\\n    function receiveValidatedVaultAction(VaultAction, bytes calldata) external;\\n\\n    function setAccessorForFundReconfiguration(address) external;\\n\\n    function setSymbol(string calldata) external;\\n\\n    function transferShares(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetTo(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x988fb29885af5cd96ad8d9f9a8be4689bcbfbcde564bc0b799beb0d1406215ec\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"../../../../persistent/external-positions/IExternalPosition.sol\\\";\\nimport \\\"../../../../persistent/protocol-fee-reserve/interfaces/IProtocolFeeReserve1.sol\\\";\\nimport \\\"../../../../persistent/vault/VaultLibBase2.sol\\\";\\nimport \\\"../../../infrastructure/gas-relayer/GasRelayRecipientMixin.sol\\\";\\nimport \\\"../../../infrastructure/protocol-fees/IProtocolFeeTracker.sol\\\";\\nimport \\\"../../../extensions/external-position-manager/IExternalPositionManager.sol\\\";\\nimport \\\"../../../interfaces/IWETH.sol\\\";\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../comptroller/IComptroller.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\n/// @title VaultLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The per-release proxiable library contract for VaultProxy\\n/// @dev The difference in terminology between \\\"asset\\\" and \\\"trackedAsset\\\" is intentional.\\n/// A fund might actually have asset balances of un-tracked assets,\\n/// but only tracked assets are used in gav calculations.\\n/// Note that this contract inherits VaultLibSafeMath (a verbatim Open Zeppelin SafeMath copy)\\n/// from SharesTokenBase via VaultLibBase2\\ncontract VaultLib is VaultLibBase2, IVault, GasRelayRecipientMixin {\\n    using AddressArrayLib for address[];\\n    using SafeERC20 for ERC20;\\n\\n    address private immutable EXTERNAL_POSITION_MANAGER;\\n    // The account to which to send $MLN earmarked for burn.\\n    // A value of `address(0)` signifies burning from the current contract.\\n    address private immutable MLN_BURNER;\\n    address private immutable MLN_TOKEN;\\n    // \\\"Positions\\\" are \\\"tracked assets\\\" + active \\\"external positions\\\"\\n    // Before updating POSITIONS_LIMIT in the future, it is important to consider:\\n    // 1. The highest positions limit ever allowed in the protocol\\n    // 2. That the next value will need to be respected by all future releases\\n    uint256 private immutable POSITIONS_LIMIT;\\n    address private immutable PROTOCOL_FEE_RESERVE;\\n    address private immutable PROTOCOL_FEE_TRACKER;\\n    address private immutable WETH_TOKEN;\\n\\n    modifier notShares(address _asset) {\\n        require(_asset != address(this), \\\"Cannot act on shares\\\");\\n        _;\\n    }\\n\\n    modifier onlyAccessor() {\\n        require(msg.sender == accessor, \\\"Only the designated accessor can make this call\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(__msgSender() == owner, \\\"Only the owner can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _externalPositionManager,\\n        address _gasRelayPaymasterFactory,\\n        address _protocolFeeReserve,\\n        address _protocolFeeTracker,\\n        address _mlnToken,\\n        address _mlnBurner,\\n        address _wethToken,\\n        uint256 _positionsLimit\\n    ) public GasRelayRecipientMixin(_gasRelayPaymasterFactory) {\\n        EXTERNAL_POSITION_MANAGER = _externalPositionManager;\\n        MLN_BURNER = _mlnBurner;\\n        MLN_TOKEN = _mlnToken;\\n        POSITIONS_LIMIT = _positionsLimit;\\n        PROTOCOL_FEE_RESERVE = _protocolFeeReserve;\\n        PROTOCOL_FEE_TRACKER = _protocolFeeTracker;\\n        WETH_TOKEN = _wethToken;\\n    }\\n\\n    /// @dev If a VaultProxy receives ETH, immediately wrap into WETH.\\n    /// Will not be able to receive ETH via .transfer() or .send() due to limited gas forwarding.\\n    receive() external payable {\\n        uint256 ethAmount = payable(address(this)).balance;\\n        IWETH(payable(getWethToken())).deposit{value: ethAmount}();\\n\\n        emit EthReceived(msg.sender, ethAmount);\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Gets the external position library contract for a given type\\n    /// @param _typeId The type for which to get the external position library\\n    /// @return externalPositionLib_ The external position library\\n    function getExternalPositionLibForType(uint256 _typeId)\\n        external\\n        view\\n        override\\n        returns (address externalPositionLib_)\\n    {\\n        return\\n            IExternalPositionManager(getExternalPositionManager()).getExternalPositionLibForType(\\n                _typeId\\n            );\\n    }\\n\\n    /// @notice Sets shares as (permanently) freely transferable\\n    /// @dev Once set, this can never be allowed to be unset, as it provides a critical\\n    /// transferability guarantee to liquidity pools and other smart contract holders\\n    /// that rely on transfers to function properly. Enabling this option will skip all\\n    /// policies run upon transferring shares, but will still respect the shares action timelock.\\n    function setFreelyTransferableShares() external onlyOwner {\\n        require(!sharesAreFreelyTransferable(), \\\"setFreelyTransferableShares: Already set\\\");\\n\\n        freelyTransferableShares = true;\\n\\n        emit FreelyTransferableSharesSet();\\n    }\\n\\n    /// @notice Sets the shares name\\n    /// @param _nextName The next name value\\n    /// @dev Owners should consider the implications of changing an ERC20 name post-deployment,\\n    /// e.g., some apps/dapps may cache token names for display purposes, so changing the name\\n    /// in contract state may not be reflected in third party applications as desired.\\n    function setName(string calldata _nextName) external onlyOwner {\\n        sharesName = _nextName;\\n\\n        emit NameSet(_nextName);\\n    }\\n\\n    /// @notice Sets the shares token symbol\\n    /// @param _nextSymbol The next symbol value\\n    /// @dev Owners should consider the implications of changing an ERC20 symbol post-deployment,\\n    /// e.g., some apps/dapps may cache token symbols for display purposes, so changing the symbol\\n    /// in contract state may not be reflected in third party applications as desired.\\n    /// Only callable by the FundDeployer during vault creation or by the vault owner.\\n    function setSymbol(string calldata _nextSymbol) external override {\\n        require(__msgSender() == owner || msg.sender == getFundDeployer(), \\\"Unauthorized\\\");\\n\\n        sharesSymbol = _nextSymbol;\\n\\n        emit SymbolSet(_nextSymbol);\\n    }\\n\\n    ////////////////////////\\n    // PERMISSIONED ROLES //\\n    ////////////////////////\\n\\n    /// @notice Registers accounts that can manage vault holdings within the protocol\\n    /// @param _managers The accounts to add as asset managers\\n    function addAssetManagers(address[] calldata _managers) external onlyOwner {\\n        for (uint256 i; i < _managers.length; i++) {\\n            require(!isAssetManager(_managers[i]), \\\"addAssetManagers: Manager already registered\\\");\\n\\n            accountToIsAssetManager[_managers[i]] = true;\\n\\n            emit AssetManagerAdded(_managers[i]);\\n        }\\n    }\\n\\n    /// @notice Claim ownership of the contract\\n    function claimOwnership() external {\\n        address nextOwner = nominatedOwner;\\n        require(\\n            msg.sender == nextOwner,\\n            \\\"claimOwnership: Only the nominatedOwner can call this function\\\"\\n        );\\n\\n        delete nominatedOwner;\\n\\n        address prevOwner = owner;\\n        owner = nextOwner;\\n\\n        emit OwnershipTransferred(prevOwner, nextOwner);\\n    }\\n\\n    /// @notice Deregisters accounts that can manage vault holdings within the protocol\\n    /// @param _managers The accounts to remove as asset managers\\n    function removeAssetManagers(address[] calldata _managers) external onlyOwner {\\n        for (uint256 i; i < _managers.length; i++) {\\n            require(isAssetManager(_managers[i]), \\\"removeAssetManagers: Manager not registered\\\");\\n\\n            accountToIsAssetManager[_managers[i]] = false;\\n\\n            emit AssetManagerRemoved(_managers[i]);\\n        }\\n    }\\n\\n    /// @notice Revoke the nomination of a new contract owner\\n    function removeNominatedOwner() external onlyOwner {\\n        address removedNominatedOwner = nominatedOwner;\\n        require(\\n            removedNominatedOwner != address(0),\\n            \\\"removeNominatedOwner: There is no nominated owner\\\"\\n        );\\n\\n        delete nominatedOwner;\\n\\n        emit NominatedOwnerRemoved(removedNominatedOwner);\\n    }\\n\\n    /// @notice Sets the account that is allowed to migrate a fund to new releases\\n    /// @param _nextMigrator The account to set as the allowed migrator\\n    /// @dev Set to address(0) to remove the migrator.\\n    function setMigrator(address _nextMigrator) external onlyOwner {\\n        address prevMigrator = migrator;\\n        require(_nextMigrator != prevMigrator, \\\"setMigrator: Value already set\\\");\\n\\n        migrator = _nextMigrator;\\n\\n        emit MigratorSet(prevMigrator, _nextMigrator);\\n    }\\n\\n    /// @notice Nominate a new contract owner\\n    /// @param _nextNominatedOwner The account to nominate\\n    /// @dev Does not prohibit overwriting the current nominatedOwner\\n    function setNominatedOwner(address _nextNominatedOwner) external onlyOwner {\\n        require(\\n            _nextNominatedOwner != address(0),\\n            \\\"setNominatedOwner: _nextNominatedOwner cannot be empty\\\"\\n        );\\n        require(\\n            _nextNominatedOwner != owner,\\n            \\\"setNominatedOwner: _nextNominatedOwner is already the owner\\\"\\n        );\\n        require(\\n            _nextNominatedOwner != nominatedOwner,\\n            \\\"setNominatedOwner: _nextNominatedOwner is already nominated\\\"\\n        );\\n\\n        nominatedOwner = _nextNominatedOwner;\\n\\n        emit NominatedOwnerSet(_nextNominatedOwner);\\n    }\\n\\n    ////////////////////////\\n    // FUND DEPLOYER ONLY //\\n    ////////////////////////\\n\\n    /// @notice Updates the accessor during a config change within this release\\n    /// @param _nextAccessor The next accessor\\n    function setAccessorForFundReconfiguration(address _nextAccessor) external override {\\n        require(msg.sender == getFundDeployer(), \\\"Only the FundDeployer can make this call\\\");\\n\\n        __setAccessor(_nextAccessor);\\n    }\\n\\n    ///////////////////////////////////////\\n    // ACCESSOR (COMPTROLLER PROXY) ONLY //\\n    ///////////////////////////////////////\\n\\n    /// @notice Adds a tracked asset\\n    /// @param _asset The asset to add as a tracked asset\\n    function addTrackedAsset(address _asset) external override onlyAccessor {\\n        __addTrackedAsset(_asset);\\n    }\\n\\n    /// @notice Burns fund shares from a particular account\\n    /// @param _target The account for which to burn shares\\n    /// @param _amount The amount of shares to burn\\n    function burnShares(address _target, uint256 _amount) external override onlyAccessor {\\n        __burn(_target, _amount);\\n    }\\n\\n    /// @notice Buys back shares collected as protocol fee at a discounted shares price, using MLN\\n    /// @param _sharesAmount The amount of shares to buy back\\n    /// @param _mlnValue The MLN-denominated market value of _sharesAmount\\n    /// @param _gav The total fund GAV\\n    /// @dev Since the vault controls both the MLN to burn and the admin function to burn any user's\\n    /// fund shares, there is no need to transfer assets back-and-forth with the ProtocolFeeReserve.\\n    /// We only need to know the correct discounted amount of MLN to burn.\\n    function buyBackProtocolFeeShares(\\n        uint256 _sharesAmount,\\n        uint256 _mlnValue,\\n        uint256 _gav\\n    ) external override onlyAccessor {\\n        uint256 mlnAmountToBurn = IProtocolFeeReserve1(getProtocolFeeReserve())\\n            .buyBackSharesViaTrustedVaultProxy(_sharesAmount, _mlnValue, _gav);\\n\\n        if (mlnAmountToBurn == 0) {\\n            return;\\n        }\\n\\n        // Burn shares and MLN amounts\\n        // If shares or MLN balance is insufficient, will revert\\n        __burn(getProtocolFeeReserve(), _sharesAmount);\\n\\n        if (getMlnBurner() == address(0)) {\\n            ERC20Burnable(getMlnToken()).burn(mlnAmountToBurn);\\n        } else {\\n            ERC20(getMlnToken()).safeTransfer(getMlnBurner(), mlnAmountToBurn);\\n        }\\n\\n        emit ProtocolFeeSharesBoughtBack(_sharesAmount, _mlnValue, mlnAmountToBurn);\\n    }\\n\\n    /// @notice Makes an arbitrary call with this contract as the sender\\n    /// @param _contract The contract to call\\n    /// @param _callData The call data for the call\\n    /// @return returnData_ The data returned by the call\\n    function callOnContract(address _contract, bytes calldata _callData)\\n        external\\n        override\\n        onlyAccessor\\n        returns (bytes memory returnData_)\\n    {\\n        bool success;\\n        (success, returnData_) = _contract.call(_callData);\\n        require(success, string(returnData_));\\n\\n        return returnData_;\\n    }\\n\\n    /// @notice Mints fund shares to a particular account\\n    /// @param _target The account for which to burn shares\\n    /// @param _amount The amount of shares to mint\\n    function mintShares(address _target, uint256 _amount) external override onlyAccessor {\\n        __mint(_target, _amount);\\n    }\\n\\n    /// @notice Pays the due protocol fee by minting shares to the ProtocolFeeReserve\\n    function payProtocolFee() external override onlyAccessor {\\n        uint256 sharesDue = IProtocolFeeTracker(getProtocolFeeTracker()).payFee();\\n\\n        if (sharesDue == 0) {\\n            return;\\n        }\\n\\n        __mint(getProtocolFeeReserve(), sharesDue);\\n\\n        emit ProtocolFeePaidInShares(sharesDue);\\n    }\\n\\n    /// @notice Transfers fund shares from one account to another\\n    /// @param _from The account from which to transfer shares\\n    /// @param _to The account to which to transfer shares\\n    /// @param _amount The amount of shares to transfer\\n    /// @dev For protocol use only, all other transfers should operate\\n    /// via standard ERC20 functions\\n    function transferShares(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyAccessor {\\n        __transfer(_from, _to, _amount);\\n    }\\n\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\n    /// @param _asset The asset to withdraw\\n    /// @param _target The account to which to withdraw the asset\\n    /// @param _amount The amount of asset to withdraw\\n    function withdrawAssetTo(\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) external override onlyAccessor {\\n        __withdrawAssetTo(_asset, _target, _amount);\\n    }\\n\\n    ///////////////////////////\\n    // VAULT ACTION DISPATCH //\\n    ///////////////////////////\\n\\n    /// @notice Dispatches a call initiated from an Extension, validated by the ComptrollerProxy\\n    /// @param _action The VaultAction to perform\\n    /// @param _actionData The call data for the action to perform\\n    function receiveValidatedVaultAction(VaultAction _action, bytes calldata _actionData)\\n        external\\n        override\\n        onlyAccessor\\n    {\\n        if (_action == VaultAction.AddExternalPosition) {\\n            __executeVaultActionAddExternalPosition(_actionData);\\n        } else if (_action == VaultAction.AddTrackedAsset) {\\n            __executeVaultActionAddTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.ApproveAssetSpender) {\\n            __executeVaultActionApproveAssetSpender(_actionData);\\n        } else if (_action == VaultAction.BurnShares) {\\n            __executeVaultActionBurnShares(_actionData);\\n        } else if (_action == VaultAction.CallOnExternalPosition) {\\n            __executeVaultActionCallOnExternalPosition(_actionData);\\n        } else if (_action == VaultAction.MintShares) {\\n            __executeVaultActionMintShares(_actionData);\\n        } else if (_action == VaultAction.RemoveExternalPosition) {\\n            __executeVaultActionRemoveExternalPosition(_actionData);\\n        } else if (_action == VaultAction.RemoveTrackedAsset) {\\n            __executeVaultActionRemoveTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.TransferShares) {\\n            __executeVaultActionTransferShares(_actionData);\\n        } else if (_action == VaultAction.WithdrawAssetTo) {\\n            __executeVaultActionWithdrawAssetTo(_actionData);\\n        }\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.AddExternalPosition\\n    function __executeVaultActionAddExternalPosition(bytes memory _actionData) private {\\n        __addExternalPosition(abi.decode(_actionData, (address)));\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.AddTrackedAsset\\n    function __executeVaultActionAddTrackedAsset(bytes memory _actionData) private {\\n        __addTrackedAsset(abi.decode(_actionData, (address)));\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.ApproveAssetSpender\\n    function __executeVaultActionApproveAssetSpender(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n\\n        __approveAssetSpender(asset, target, amount);\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.BurnShares\\n    function __executeVaultActionBurnShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n\\n        __burn(target, amount);\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.CallOnExternalPosition\\n    function __executeVaultActionCallOnExternalPosition(bytes memory _actionData) private {\\n        (\\n            address externalPosition,\\n            bytes memory callOnExternalPositionActionData,\\n            address[] memory assetsToTransfer,\\n            uint256[] memory amountsToTransfer,\\n            address[] memory assetsToReceive\\n        ) = abi.decode(_actionData, (address, bytes, address[], uint256[], address[]));\\n\\n        __callOnExternalPosition(\\n            externalPosition,\\n            callOnExternalPositionActionData,\\n            assetsToTransfer,\\n            amountsToTransfer,\\n            assetsToReceive\\n        );\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.MintShares\\n    function __executeVaultActionMintShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n\\n        __mint(target, amount);\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.RemoveExternalPosition\\n    function __executeVaultActionRemoveExternalPosition(bytes memory _actionData) private {\\n        __removeExternalPosition(abi.decode(_actionData, (address)));\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.RemoveTrackedAsset\\n    function __executeVaultActionRemoveTrackedAsset(bytes memory _actionData) private {\\n        __removeTrackedAsset(abi.decode(_actionData, (address)));\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.TransferShares\\n    function __executeVaultActionTransferShares(bytes memory _actionData) private {\\n        (address from, address to, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n\\n        __transfer(from, to, amount);\\n    }\\n\\n    /// @dev Helper to decode actionData and execute VaultAction.WithdrawAssetTo\\n    function __executeVaultActionWithdrawAssetTo(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n\\n        __withdrawAssetTo(asset, target, amount);\\n    }\\n\\n    ///////////////////\\n    // VAULT ACTIONS //\\n    ///////////////////\\n\\n    /// @dev Helper to track a new active external position\\n    function __addExternalPosition(address _externalPosition) private {\\n        if (!isActiveExternalPosition(_externalPosition)) {\\n            __validatePositionsLimit();\\n\\n            externalPositionToIsActive[_externalPosition] = true;\\n            activeExternalPositions.push(_externalPosition);\\n\\n            emit ExternalPositionAdded(_externalPosition);\\n        }\\n    }\\n\\n    /// @dev Helper to add a tracked asset\\n    function __addTrackedAsset(address _asset) private notShares(_asset) {\\n        if (!isTrackedAsset(_asset)) {\\n            __validatePositionsLimit();\\n\\n            assetToIsTracked[_asset] = true;\\n            trackedAssets.push(_asset);\\n\\n            emit TrackedAssetAdded(_asset);\\n        }\\n    }\\n\\n    /// @dev Helper to grant an allowance to a spender to use a vault asset\\n    function __approveAssetSpender(\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) private notShares(_asset) {\\n        ERC20 assetContract = ERC20(_asset);\\n        if (assetContract.allowance(address(this), _target) > 0) {\\n            assetContract.safeApprove(_target, 0);\\n        }\\n        assetContract.safeApprove(_target, _amount);\\n    }\\n\\n    /// @dev Helper to make a call on a external position contract\\n    /// @param _externalPosition The external position to call\\n    /// @param _actionData The action data for the call\\n    /// @param _assetsToTransfer The assets to transfer to the external position\\n    /// @param _amountsToTransfer The amount of assets to be transferred to the external position\\n    /// @param _assetsToReceive The assets that will be received from the call\\n    function __callOnExternalPosition(\\n        address _externalPosition,\\n        bytes memory _actionData,\\n        address[] memory _assetsToTransfer,\\n        uint256[] memory _amountsToTransfer,\\n        address[] memory _assetsToReceive\\n    ) private {\\n        require(\\n            isActiveExternalPosition(_externalPosition),\\n            \\\"__callOnExternalPosition: Not an active external position\\\"\\n        );\\n\\n        for (uint256 i; i < _assetsToTransfer.length; i++) {\\n            __withdrawAssetTo(_assetsToTransfer[i], _externalPosition, _amountsToTransfer[i]);\\n        }\\n\\n        IExternalPosition(_externalPosition).receiveCallFromVault(_actionData);\\n\\n        for (uint256 i; i < _assetsToReceive.length; i++) {\\n            __addTrackedAsset(_assetsToReceive[i]);\\n        }\\n    }\\n\\n    /// @dev Helper to the get the Vault's balance of a given asset\\n    function __getAssetBalance(address _asset) private view returns (uint256 balance_) {\\n        return ERC20(_asset).balanceOf(address(this));\\n    }\\n\\n    /// @dev Helper to remove a external position from the vault\\n    function __removeExternalPosition(address _externalPosition) private {\\n        if (isActiveExternalPosition(_externalPosition)) {\\n            externalPositionToIsActive[_externalPosition] = false;\\n\\n            activeExternalPositions.removeStorageItem(_externalPosition);\\n\\n            emit ExternalPositionRemoved(_externalPosition);\\n        }\\n    }\\n\\n    /// @dev Helper to remove a tracked asset\\n    function __removeTrackedAsset(address _asset) private {\\n        if (isTrackedAsset(_asset)) {\\n            assetToIsTracked[_asset] = false;\\n\\n            trackedAssets.removeStorageItem(_asset);\\n\\n            emit TrackedAssetRemoved(_asset);\\n        }\\n    }\\n\\n    /// @dev Helper to validate that the positions limit has not been reached\\n    function __validatePositionsLimit() private view {\\n        require(\\n            trackedAssets.length + activeExternalPositions.length < getPositionsLimit(),\\n            \\\"__validatePositionsLimit: Limit exceeded\\\"\\n        );\\n    }\\n\\n    /// @dev Helper to withdraw an asset from the vault to a specified recipient\\n    function __withdrawAssetTo(\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) private notShares(_asset) {\\n        ERC20(_asset).safeTransfer(_target, _amount);\\n\\n        emit AssetWithdrawn(_asset, _target, _amount);\\n    }\\n\\n    ////////////////////////////\\n    // SHARES ERC20 OVERRIDES //\\n    ////////////////////////////\\n\\n    /// @notice Gets the `symbol` value of the shares token\\n    /// @return symbol_ The `symbol` value\\n    /// @dev Defers the shares symbol value to the Dispatcher contract if not set locally\\n    function symbol() public view override returns (string memory symbol_) {\\n        symbol_ = sharesSymbol;\\n        if (bytes(symbol_).length == 0) {\\n            symbol_ = IDispatcher(creator).getSharesTokenSymbol();\\n        }\\n\\n        return symbol_;\\n    }\\n\\n    /// @dev Standard implementation of ERC20's transfer().\\n    /// Overridden to allow arbitrary logic in ComptrollerProxy prior to transfer.\\n    function transfer(address _recipient, uint256 _amount)\\n        public\\n        override\\n        returns (bool success_)\\n    {\\n        __invokePreTransferSharesHook(msg.sender, _recipient, _amount);\\n\\n        return super.transfer(_recipient, _amount);\\n    }\\n\\n    /// @dev Standard implementation of ERC20's transferFrom().\\n    /// Overridden to allow arbitrary logic in ComptrollerProxy prior to transfer.\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public override returns (bool success_) {\\n        __invokePreTransferSharesHook(_sender, _recipient, _amount);\\n\\n        return super.transferFrom(_sender, _recipient, _amount);\\n    }\\n\\n    /// @dev Helper to call the relevant preTransferShares hook\\n    function __invokePreTransferSharesHook(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) private {\\n        if (sharesAreFreelyTransferable()) {\\n            IComptroller(accessor).preTransferSharesHookFreelyTransferable(_sender);\\n        } else {\\n            IComptroller(accessor).preTransferSharesHook(_sender, _recipient, _amount);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Checks whether an account can manage assets\\n    /// @param _who The account to check\\n    /// @return canManageAssets_ True if the account can manage assets\\n    function canManageAssets(address _who) external view override returns (bool canManageAssets_) {\\n        return _who == getOwner() || isAssetManager(_who);\\n    }\\n\\n    /// @notice Checks whether an account can use gas relaying\\n    /// @param _who The account to check\\n    /// @return canRelayCalls_ True if the account can use gas relaying on this fund\\n    function canRelayCalls(address _who) external view override returns (bool canRelayCalls_) {\\n        return _who == getOwner() || isAssetManager(_who) || _who == getMigrator();\\n    }\\n\\n    /// @notice Gets the `accessor` variable\\n    /// @return accessor_ The `accessor` variable value\\n    function getAccessor() public view override returns (address accessor_) {\\n        return accessor;\\n    }\\n\\n    /// @notice Gets the `creator` variable\\n    /// @return creator_ The `creator` variable value\\n    function getCreator() external view returns (address creator_) {\\n        return creator;\\n    }\\n\\n    /// @notice Gets the `migrator` variable\\n    /// @return migrator_ The `migrator` variable value\\n    function getMigrator() public view returns (address migrator_) {\\n        return migrator;\\n    }\\n\\n    /// @notice Gets the account that is nominated to be the next owner of this contract\\n    /// @return nominatedOwner_ The account that is nominated to be the owner\\n    function getNominatedOwner() external view returns (address nominatedOwner_) {\\n        return nominatedOwner;\\n    }\\n\\n    /// @notice Gets the `activeExternalPositions` variable\\n    /// @return activeExternalPositions_ The `activeExternalPositions` variable value\\n    function getActiveExternalPositions()\\n        external\\n        view\\n        override\\n        returns (address[] memory activeExternalPositions_)\\n    {\\n        return activeExternalPositions;\\n    }\\n\\n    /// @notice Gets the `trackedAssets` variable\\n    /// @return trackedAssets_ The `trackedAssets` variable value\\n    function getTrackedAssets() external view override returns (address[] memory trackedAssets_) {\\n        return trackedAssets;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Gets the `EXTERNAL_POSITION_MANAGER` variable\\n    /// @return externalPositionManager_ The `EXTERNAL_POSITION_MANAGER` variable value\\n    function getExternalPositionManager() public view returns (address externalPositionManager_) {\\n        return EXTERNAL_POSITION_MANAGER;\\n    }\\n\\n    /// @notice Gets the vaults fund deployer\\n    /// @return fundDeployer_ The fund deployer contract associated with this vault\\n    function getFundDeployer() public view returns (address fundDeployer_) {\\n        return IDispatcher(creator).getFundDeployerForVaultProxy(address(this));\\n    }\\n\\n    /// @notice Gets the `MLN_BURNER` variable\\n    /// @return mlnBurner_ The `MLN_BURNER` variable value\\n    function getMlnBurner() public view returns (address mlnBurner_) {\\n        return MLN_BURNER;\\n    }\\n\\n    /// @notice Gets the `MLN_TOKEN` variable\\n    /// @return mlnToken_ The `MLN_TOKEN` variable value\\n    function getMlnToken() public view returns (address mlnToken_) {\\n        return MLN_TOKEN;\\n    }\\n\\n    /// @notice Gets the `owner` variable\\n    /// @return owner_ The `owner` variable value\\n    function getOwner() public view override returns (address owner_) {\\n        return owner;\\n    }\\n\\n    /// @notice Gets the `POSITIONS_LIMIT` variable\\n    /// @return positionsLimit_ The `POSITIONS_LIMIT` variable value\\n    function getPositionsLimit() public view returns (uint256 positionsLimit_) {\\n        return POSITIONS_LIMIT;\\n    }\\n\\n    /// @notice Gets the `PROTOCOL_FEE_RESERVE` variable\\n    /// @return protocolFeeReserve_ The `PROTOCOL_FEE_RESERVE` variable value\\n    function getProtocolFeeReserve() public view returns (address protocolFeeReserve_) {\\n        return PROTOCOL_FEE_RESERVE;\\n    }\\n\\n    /// @notice Gets the `PROTOCOL_FEE_TRACKER` variable\\n    /// @return protocolFeeTracker_ The `PROTOCOL_FEE_TRACKER` variable value\\n    function getProtocolFeeTracker() public view returns (address protocolFeeTracker_) {\\n        return PROTOCOL_FEE_TRACKER;\\n    }\\n\\n    /// @notice Check whether an external position is active on the vault\\n    /// @param _externalPosition The externalPosition to check\\n    /// @return isActiveExternalPosition_ True if the address is an active external position on the vault\\n    function isActiveExternalPosition(address _externalPosition)\\n        public\\n        view\\n        override\\n        returns (bool isActiveExternalPosition_)\\n    {\\n        return externalPositionToIsActive[_externalPosition];\\n    }\\n\\n    /// @notice Checks whether an account is an allowed asset manager\\n    /// @param _who The account to check\\n    /// @return isAssetManager_ True if the account is an allowed asset manager\\n    function isAssetManager(address _who) public view returns (bool isAssetManager_) {\\n        return accountToIsAssetManager[_who];\\n    }\\n\\n    /// @notice Checks whether an address is a tracked asset of the vault\\n    /// @param _asset The address to check\\n    /// @return isTrackedAsset_ True if the address is a tracked asset\\n    function isTrackedAsset(address _asset) public view override returns (bool isTrackedAsset_) {\\n        return assetToIsTracked[_asset];\\n    }\\n\\n    /// @notice Checks whether shares are (permanently) freely transferable\\n    /// @return sharesAreFreelyTransferable_ True if shares are (permanently) freely transferable\\n    function sharesAreFreelyTransferable()\\n        public\\n        view\\n        override\\n        returns (bool sharesAreFreelyTransferable_)\\n    {\\n        return freelyTransferableShares;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0x403c856b8be641ee33cc6c9ca99326479896efc1a19665032f654c129bc93a59\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/external-position-manager/IExternalPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the ExternalPositionManager\\ninterface IExternalPositionManager {\\n    struct ExternalPositionTypeInfo {\\n        address parser;\\n        address lib;\\n    }\\n    enum ExternalPositionManagerActions {\\n        CreateExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition,\\n        ReactivateExternalPosition\\n    }\\n\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3af3f634e1f99fb97091b7825c0d2e2baaafc124d4e87d56cb0c17ff8554f6c6\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/gas-relayer/GasRelayRecipientMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"../../utils/beacon-proxy/IBeaconProxyFactory.sol\\\";\\nimport \\\"./IGasRelayPaymaster.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title GasRelayRecipientMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin that enables receiving GSN-relayed calls\\n/// @dev IMPORTANT: Do not use storage var in this contract,\\n/// unless it is no longer inherited by the VaultLib\\nabstract contract GasRelayRecipientMixin {\\n    address internal immutable GAS_RELAY_PAYMASTER_FACTORY;\\n\\n    constructor(address _gasRelayPaymasterFactory) internal {\\n        GAS_RELAY_PAYMASTER_FACTORY = _gasRelayPaymasterFactory;\\n    }\\n\\n    /// @dev Helper to parse the canonical sender of a tx based on whether it has been relayed\\n    function __msgSender() internal view returns (address payable canonicalSender_) {\\n        if (msg.data.length >= 24 && msg.sender == getGasRelayTrustedForwarder()) {\\n            assembly {\\n                canonicalSender_ := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n\\n            return canonicalSender_;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `GAS_RELAY_PAYMASTER_FACTORY` variable\\n    /// @return gasRelayPaymasterFactory_ The `GAS_RELAY_PAYMASTER_FACTORY` variable value\\n    function getGasRelayPaymasterFactory()\\n        public\\n        view\\n        returns (address gasRelayPaymasterFactory_)\\n    {\\n        return GAS_RELAY_PAYMASTER_FACTORY;\\n    }\\n\\n    /// @notice Gets the trusted forwarder for GSN relaying\\n    /// @return trustedForwarder_ The trusted forwarder\\n    function getGasRelayTrustedForwarder() public view returns (address trustedForwarder_) {\\n        return\\n            IGasRelayPaymaster(\\n                IBeaconProxyFactory(getGasRelayPaymasterFactory()).getCanonicalLib()\\n            )\\n                .trustedForwarder();\\n    }\\n}\\n\",\"keccak256\":\"0xa5741fbd96f87cc20c961d8dfa43937f8a83dfdbdb93b542e789c89698ddd418\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/gas-relayer/IGasRelayPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../interfaces/IGsnPaymaster.sol\\\";\\n\\n/// @title IGasRelayPaymaster Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGasRelayPaymaster is IGsnPaymaster {\\n    function deposit() external;\\n\\n    function withdrawBalance() external;\\n}\\n\",\"keccak256\":\"0xb8b05029aca9eb89ff33c9cc3f97f6d096a5d8185a5ddcdec7cb1a92e4927b01\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/protocol-fees/IProtocolFeeTracker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IProtocolFeeTracker Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IProtocolFeeTracker {\\n    function initializeForVault(address) external;\\n\\n    function payFee() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x232b347f83457439064add7369bfe1930c7cb56f15930bb87d640e909c15e447\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IGsnForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IGsnForwarder interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnForwarder {\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntil;\\n    }\\n}\\n\",\"keccak256\":\"0xdf725d6209efe494c5f56c1f3d2cc8c64f0785b4b62fa9869bee3d85d8d9e030\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IGsnPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IGsnTypes.sol\\\";\\n\\n/// @title IGsnPaymaster interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnPaymaster {\\n    struct GasAndDataLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n        uint256 calldataSizeLimit;\\n    }\\n\\n    function getGasAndDataLimits() external view returns (GasAndDataLimits memory limits);\\n\\n    function getHubAddr() external view returns (address);\\n\\n    function getRelayHubDeposit() external view returns (uint256);\\n\\n    function preRelayedCall(\\n        IGsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    ) external returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        IGsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    function trustedForwarder() external view returns (address);\\n\\n    function versionPaymaster() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2b6990c5f1721a994774d431c41563970e9400971df9ba0ff91ead265427272c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IGsnTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IGsnForwarder.sol\\\";\\n\\n/// @title IGsnTypes Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IGsnTypes {\\n    struct RelayData {\\n        uint256 gasPrice;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        address relayWorker;\\n        address paymaster;\\n        address forwarder;\\n        bytes paymasterData;\\n        uint256 clientId;\\n    }\\n\\n    struct RelayRequest {\\n        IGsnForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\",\"keccak256\":\"0xa5e951206789bd818be825058792b233858a9c58ca25d451b3691917a0ce3714\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title WETH Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x85b5e76c50599abed5b16555065e4809b25fd0e6f75a63cf72269c1545e96b96\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    /// @dev Helper to verify if a storage array contains a particular value\\n    function storageArrayContains(address[] storage _self, address _target)\\n        internal\\n        view\\n        returns (bool doesContain_)\\n    {\\n        uint256 arrLength = _self.length;\\n        for (uint256 i; i < arrLength; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0xd76e220cc754d7c939e54c18d4060f843ca798bccaf9a9dbbd428e38d0f0960f\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/beacon-proxy/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IBeacon interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IBeacon {\\n    function getCanonicalLib() external view returns (address);\\n}\\n\",\"keccak256\":\"0x27a585523828a67a1a7c84eadd22b3056e8ffc51ab71992fd97c9ffb4239eeb2\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/beacon-proxy/IBeaconProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport \\\"./IBeacon.sol\\\";\\n\\npragma solidity 0.6.12;\\n\\n/// @title IBeaconProxyFactory interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IBeaconProxyFactory is IBeacon {\\n    function deployProxy(bytes memory _constructData) external returns (address proxy_);\\n\\n    function setCanonicalLib(address _canonicalLib) external;\\n}\\n\",\"keccak256\":\"0x747e53725f5dbe419893ea447df4f33a3b25d99aae5b724aa1b9778cec1a26bc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61018060405234801561001157600080fd5b5060405162004d2d38038062004d2d833981810160405261010081101561003757600080fd5b5080516020820151604083015160608085015160808087015160a08089015160c0808b015160e09b8c01516001600160601b03199a891b8b1690965299871b8916909252851b87169052831b85169096526101009590955290811b82166101205292831b811661014052911b166101605260805160601c60a05160601c60c05160601c60e05160601c610100516101205160601c6101405160601c6101605160601c614c126200011b600039806110015250806121e8525080612cac525080612d96525080612cfb525080612d7252508061289a5250806128765250614c126000f3fe6080604052600436106103855760003560e01c8063728e17a0116101d1578063ac25945611610102578063cd63d578116100a0578063e70e605e1161006f578063e70e605e14610f87578063ee7a7c0414610f9c578063fe15c02a14610fd5578063ff3cdf5614610fea57610420565b8063cd63d57814610f0d578063d5c20fa214610f22578063da41962e14610f37578063dd62ed3e14610f4c57610420565b8063b8b7f147116100dc578063b8b7f14714610dd5578063bfc77beb14610e3a578063c47f002714610e7d578063c4b9737014610ef857610420565b8063ac25945614610d30578063b3fc38e914610d45578063b84c824614610d5a57610420565b80638156eecf1161016f57806397c0ac871161014957806397c0ac8714610c24578063a9059cbb14610c39578063a90cce4b14610c72578063ab9253ac14610cfd57610420565b80638156eecf14610be5578063893d20e814610bfa57806395d89b4114610c0f57610420565b806375d8bb0e116101ab57806375d8bb0e14610b40578063797ed33914610b6a5780637c81ac2d14610b9d5780637de07cea14610bb257610420565b8063728e17a014610ac5578063740f2b5a14610af8578063749cc8f514610b2b57610420565b8063495d753c116102b65780635c9a6d37116102545780636ea21143116102235780636ea2114314610a1757806370a0823114610a2c578063712bd10214610a5f578063714ca2d114610a9257610420565b80635c9a6d37146108c05780636487aa111461095457806364cb36cb14610987578063682cea1914610a0257610420565b80634ef0762e116102905780634ef0762e1461082a578063528c198a1461085d57806352d1902d146108965780635a53e348146108ab57610420565b8063495d753c146107bd5780634c252f91146108005780634e71e0c81461081557610420565b806324e6001211610323578063313ce567116102fd578063313ce567146106b157806336861889146106dc5780633e11553d1461070f5780634140d6071461078a57610420565b806324e6001214610602578063288b6a361461068757806328c2ad9c1461069c57610420565b806318160ddd1161035f57806318160ddd1461052d5780631ff46bfa1461055457806323b872dd1461058c57806323cf3118146105cf57610420565b806306fdde0314610425578063095ea7b3146104af5780630ee2cb10146104fc57610420565b36610420573031610394610fff565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b50506040805185815290513394507f85177f287940f2f05425a4029951af0e047a7f9c4eaa9a6e6917bcd869f866959350908190036020019150a250005b600080fd5b34801561043157600080fd5b5061043a611024565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561047457818101518382015260200161045c565b50505050905090810190601f1680156104a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104bb57600080fd5b506104e8600480360360408110156104d257600080fd5b506001600160a01b0381351690602001356110ba565b604080519115158252519081900360200190f35b34801561050857600080fd5b506105116110d0565b604080516001600160a01b039092168252519081900360200190f35b34801561053957600080fd5b506105426110df565b60408051918252519081900360200190f35b34801561056057600080fd5b5061058a6004803603606081101561057757600080fd5b50803590602081013590604001356110e5565b005b34801561059857600080fd5b506104e8600480360360608110156105af57600080fd5b506001600160a01b038135811691602081013590911690604001356112c5565b3480156105db57600080fd5b5061058a600480360360208110156105f257600080fd5b50356001600160a01b03166112e7565b34801561060e57600080fd5b5061058a6004803603604081101561062557600080fd5b60ff8235169190810190604081016020820135600160201b81111561064957600080fd5b82018360208201111561065b57600080fd5b803590602001918460018302840111600160201b8311171561067c57600080fd5b509092509050611405565b34801561069357600080fd5b50610511611791565b3480156106a857600080fd5b506104e86117a5565b3480156106bd57600080fd5b506106c66117ae565b6040805160ff9092168252519081900360200190f35b3480156106e857600080fd5b506104e8600480360360208110156106ff57600080fd5b50356001600160a01b03166117b3565b34801561071b57600080fd5b5061058a6004803603602081101561073257600080fd5b810190602081018135600160201b81111561074c57600080fd5b82018360208201111561075e57600080fd5b803590602001918460208302840111600160201b8311171561077f57600080fd5b509092509050611809565b34801561079657600080fd5b5061058a600480360360208110156107ad57600080fd5b50356001600160a01b0316611989565b3480156107c957600080fd5b5061058a600480360360608110156107e057600080fd5b506001600160a01b03813581169160208101359091169060400135611a30565b34801561080c57600080fd5b50610511610fff565b34801561082157600080fd5b5061058a611a84565b34801561083657600080fd5b5061058a6004803603602081101561084d57600080fd5b50356001600160a01b0316611b36565b34801561086957600080fd5b5061058a6004803603604081101561088057600080fd5b506001600160a01b038135169060200135611b8b565b3480156108a257600080fd5b50610542611be2565b3480156108b757600080fd5b50610511611c06565b3480156108cc57600080fd5b5061058a600480360360608110156108e357600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561091657600080fd5b82018360208201111561092857600080fd5b803590602001918460018302840111600160201b8311171561094957600080fd5b509092509050611c15565b34801561096057600080fd5b506104e86004803603602081101561097757600080fd5b50356001600160a01b0316611d03565b34801561099357600080fd5b5061058a600480360360208110156109aa57600080fd5b810190602081018135600160201b8111156109c457600080fd5b8201836020820111156109d657600080fd5b803590602001918460208302840111600160201b831117156109f757600080fd5b509092509050611d21565b348015610a0e57600080fd5b50610511611e8b565b348015610a2357600080fd5b50610511611eb0565b348015610a3857600080fd5b5061054260048036036020811015610a4f57600080fd5b50356001600160a01b0316611f91565b348015610a6b57600080fd5b506104e860048036036020811015610a8257600080fd5b50356001600160a01b0316611fac565b348015610a9e57600080fd5b506104e860048036036020811015610ab557600080fd5b50356001600160a01b0316611fca565b348015610ad157600080fd5b5061058a60048036036020811015610ae857600080fd5b50356001600160a01b0316611ff7565b348015610b0457600080fd5b5061058a60048036036020811015610b1b57600080fd5b50356001600160a01b0316612186565b348015610b3757600080fd5b506105116121e6565b348015610b4c57600080fd5b5061051160048036036020811015610b6357600080fd5b503561220a565b348015610b7657600080fd5b506104e860048036036020811015610b8d57600080fd5b50356001600160a01b0316612289565b348015610ba957600080fd5b5061058a6122a7565b348015610bbe57600080fd5b506104e860048036036020811015610bd557600080fd5b50356001600160a01b031661237c565b348015610bf157600080fd5b5061058a6123ab565b348015610c0657600080fd5b50610511612499565b348015610c1b57600080fd5b5061043a6124a8565b348015610c3057600080fd5b50610511612682565b348015610c4557600080fd5b506104e860048036036040811015610c5c57600080fd5b506001600160a01b0381351690602001356126cd565b348015610c7e57600080fd5b5061043a60048036036040811015610c9557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610cbf57600080fd5b820183602082011115610cd157600080fd5b803590602001918460018302840111600160201b83111715610cf257600080fd5b5090925090506126e4565b348015610d0957600080fd5b5061058a60048036036020811015610d2057600080fd5b50356001600160a01b031661282b565b348015610d3c57600080fd5b50610511612874565b348015610d5157600080fd5b50610511612898565b348015610d6657600080fd5b5061058a60048036036020811015610d7d57600080fd5b810190602081018135600160201b811115610d9757600080fd5b820183602082011115610da957600080fd5b803590602001918460018302840111600160201b83111715610dca57600080fd5b5090925090506128bc565b348015610de157600080fd5b50610dea6129ae565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610e26578181015183820152602001610e0e565b505050509050019250505060405180910390f35b348015610e4657600080fd5b5061058a60048036036060811015610e5d57600080fd5b506001600160a01b03813581169160208101359091169060400135612a0f565b348015610e8957600080fd5b5061058a60048036036020811015610ea057600080fd5b810190602081018135600160201b811115610eba57600080fd5b820183602082011115610ecc57600080fd5b803590602001918460018302840111600160201b83111715610eed57600080fd5b509092509050612a63565b348015610f0457600080fd5b50610dea612b2d565b348015610f1957600080fd5b50610511612b8d565b348015610f2e57600080fd5b5061058a612b9c565b348015610f4357600080fd5b50610511612caa565b348015610f5857600080fd5b5061054260048036036040811015610f6f57600080fd5b506001600160a01b0381358116916020013516612cce565b348015610f9357600080fd5b50610511612cf9565b348015610fa857600080fd5b5061058a60048036036040811015610fbf57600080fd5b506001600160a01b038135169060200135612d1d565b348015610fe157600080fd5b50610511612d70565b348015610ff657600080fd5b50610542612d94565b7f00000000000000000000000000000000000000000000000000000000000000005b90565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156110b05780601f10611085576101008083540402835291602001916110b0565b820191906000526020600020905b81548152906001019060200180831161109357829003601f168201915b5050505050905090565b60006110c7338484612db8565b50600192915050565b6006546001600160a01b031690565b60025490565b6005546001600160a01b0316331461112e5760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6000611138612caa565b6001600160a01b03166396c45aec8585856040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050602060405180830381600087803b15801561118d57600080fd5b505af11580156111a1573d6000803e3d6000fd5b505050506040513d60208110156111b757600080fd5b50519050806111c657506112c0565b6111d76111d1612caa565b85612ea4565b60006111e1612d70565b6001600160a01b0316141561125a576111f8612cf9565b6001600160a01b03166342966c68826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561123d57600080fd5b505af1158015611251573d6000803e3d6000fd5b5050505061127e565b61127e611265612d70565b8261126e612cf9565b6001600160a01b03169190612f94565b604080518581526020810185905280820183905290517ff8c67da77ed4cb50a4dec91c60cf78ee219033bd3c55a86d133178c557c2d2cf9181900360600190a1505b505050565b60006112d2848484612fe6565b6112dd8484846130d7565b90505b9392505050565b6008546001600160a01b03166112fb613140565b6001600160a01b0316146113405760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b6007546001600160a01b039081169082168114156113a5576040805162461bcd60e51b815260206004820152601e60248201527f7365744d69677261746f723a2056616c756520616c7265616479207365740000604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f9d0761a1fa4d686cd87f8dbf8ca52f90cf19c3c4dc36e66ebbf08fc5ba203f2c9281900390910190a15050565b6005546001600160a01b0316331461144e5760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b600883600a81111561145c57fe5b14156114a6576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061318492505050565b6112c0565b600483600a8111156114b457fe5b14156114f9576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131a392505050565b600583600a81111561150757fe5b141561154c576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131c292505050565b600183600a81111561155a57fe5b141561159f576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061320392505050565b600983600a8111156115ad57fe5b14156115f2576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061323392505050565b600283600a81111561160057fe5b1415611645576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134b692505050565b600a83600a81111561165357fe5b1415611698576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134e692505050565b600683600a8111156116a657fe5b14156116eb576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061350592505050565b600383600a8111156116f957fe5b141561173e576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061352492505050565b600783600a81111561174c57fe5b14156112c0576112c082828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061355f92505050565b600b5461010090046001600160a01b031690565b600b5460ff1690565b601290565b60006117bd612499565b6001600160a01b0316826001600160a01b031614806117e057506117e082611d03565b8061180357506117ee612b8d565b6001600160a01b0316826001600160a01b0316145b92915050565b6008546001600160a01b031661181d613140565b6001600160a01b0316146118625760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b60005b818110156112c05761189183838381811061187c57fe5b905060200201356001600160a01b0316611d03565b156118cd5760405162461bcd60e51b815260040180806020018281038252602c815260200180614723602c913960400191505060405180910390fd5b6001600d60008585858181106118df57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f8cf4dd2d46ca2e74b9cc238f9e9c907b5a6a50e2f652162a062d5e8129f35d7a83838381811061195357fe5b905060200201356001600160a01b031660405180826001600160a01b0316815260200191505060405180910390a1600101611865565b6006546001600160a01b031633146119d25760405162461bcd60e51b81526004018080602001828103825260328152602001806148766032913960400191505060405180910390fd5b60006119dc611e8b565b90506119e78261359a565b604080516001600160a01b0380841682528416602082015281517fe504a0278c9d64c1a72d2f528a0c5e3686e093fcd478b3b1224a5c6983207df6929181900390910190a15050565b6005546001600160a01b03163314611a795760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6112c0838383613680565b600b5461010090046001600160a01b0316338114611ad35760405162461bcd60e51b815260040180806020018281038252603e815260200180614a8f603e913960400191505060405180910390fd5b600b8054610100600160a81b0319169055600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6005546001600160a01b03163314611b7f5760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b611b888161373b565b50565b6005546001600160a01b03163314611bd45760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b611bde8282613844565b5050565b7f027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a590565b6005546001600160a01b031690565b6006546001600160a01b031615611c73576040805162461bcd60e51b815260206004820152601f60248201527f696e69743a2050726f787920616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600680546001600160a01b03191633179055611c91600083836145d2565b50611c9b8361392a565b611ca4846139d2565b7fe504a0278c9d64c1a72d2f528a0c5e3686e093fcd478b3b1224a5c6983207df66000611ccf611e8b565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390a150505050565b6001600160a01b03166000908152600d602052604090205460ff1690565b6008546001600160a01b0316611d35613140565b6001600160a01b031614611d7a5760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b60005b818110156112c057611d9483838381811061187c57fe5b611dcf5760405162461bcd60e51b815260040180806020018281038252602b815260200180614b7c602b913960400191505060405180910390fd5b6000600d6000858585818110611de157fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f1a3f6d43a85364a6a2d8297f0cd634e060a6ef9bc11b3a0c89e47d40b89c2f7e838383818110611e5557fe5b905060200201356001600160a01b031660405180826001600160a01b0316815260200191505060405180910390a1600101611d7d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6000611eba612874565b6001600160a01b03166398a7c4c76040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef257600080fd5b505afa158015611f06573d6000803e3d6000fd5b505050506040513d6020811015611f1c57600080fd5b505160408051637da0a87760e01b815290516001600160a01b0390921691637da0a87791600480820192602092909190829003018186803b158015611f6057600080fd5b505afa158015611f74573d6000803e3d6000fd5b505050506040513d6020811015611f8a57600080fd5b5051905090565b6001600160a01b031660009081526003602052604090205490565b6001600160a01b03166000908152600e602052604090205460ff1690565b6000611fd4612499565b6001600160a01b0316826001600160a01b03161480611803575061180382611d03565b6008546001600160a01b031661200b613140565b6001600160a01b0316146120505760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b6001600160a01b0381166120955760405162461bcd60e51b81526004018080602001828103825260368152602001806148406036913960400191505060405180910390fd5b6008546001600160a01b03828116911614156120e25760405162461bcd60e51b815260040180806020018281038252603b815260200180614975603b913960400191505060405180910390fd5b600b546001600160a01b038281166101009092041614156121345760405162461bcd60e51b815260040180806020018281038252603b815260200180614a03603b913960400191505060405180910390fd5b600b8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040517f132c19de901bb4ed8403c34734b6c841d5dc57745824da452a52433519ea5abf90600090a250565b61218e612682565b6001600160a01b0316336001600160a01b0316146121dd5760405162461bcd60e51b81526004018080602001828103825260288152602001806148a86028913960400191505060405180910390fd5b611b888161392a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000612214612898565b6001600160a01b03166375d8bb0e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561225757600080fd5b505afa15801561226b573d6000803e3d6000fd5b505050506040513d602081101561228157600080fd5b505192915050565b6001600160a01b03166000908152600a602052604090205460ff1690565b6008546001600160a01b03166122bb613140565b6001600160a01b0316146123005760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b6123086117a5565b156123445760405162461bcd60e51b8152600401808060200182810382526028815260200180614b546028913960400191505060405180910390fd5b600b805460ff191660011790556040517f505ab4202e673074a7b93ec3c2ca442c3526a42232835c56d223bd09672c5b0d90600090a1565b6008546000906001600160a01b03838116911614806118035750506007546001600160a01b0390811691161490565b6008546001600160a01b03166123bf613140565b6001600160a01b0316146124045760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b600b5461010090046001600160a01b0316806124515760405162461bcd60e51b815260040180806020018281038252603181526020018061480f6031913960400191505060405180910390fd5b600b8054610100600160a81b03191690556040516001600160a01b038216907fe4136584a5e8bb85d66301f3ce8b11cc2e5a8bea3979f10ea2451353849acc4790600090a250565b6008546001600160a01b031690565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156125335780601f1061250857610100808354040283529160200191612533565b820191906000526020600020905b81548152906001019060200180831161251657829003601f168201915b5050505050905080516000141561102157600660009054906101000a90046001600160a01b03166001600160a01b031663b47b06006040518163ffffffff1660e01b815260040160006040518083038186803b15801561259257600080fd5b505afa1580156125a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156125cf57600080fd5b8101908080516040519392919084600160201b8211156125ee57600080fd5b90830190602082018581111561260357600080fd5b8251600160201b81118282018810171561261c57600080fd5b82525081516020918201929091019080838360005b83811015612649578181015183820152602001612631565b50505050905090810190601f1680156126765780820380516001836020036101000a031916815260200191505b50604052505050905090565b600654604080516307af8e9f60e31b815230600482015290516000926001600160a01b031691633d7c74f8916024808301926020929190829003018186803b158015611f6057600080fd5b60006126da338484612fe6565b6112e08383613ac6565b6005546060906001600160a01b031633146127305760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6000846001600160a01b03168484604051808383808284376040519201945060009350909150508083038183865af19150503d806000811461278e576040519150601f19603f3d011682016040523d82523d6000602084013e612793565b606091505b509250905081816128225760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127e75781810151838201526020016127cf565b50505050905090810190601f1680156128145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50509392505050565b6006546001600160a01b031633146121dd5760405162461bcd60e51b81526004018080602001828103825260328152602001806149b06032913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6008546001600160a01b03166128d0613140565b6001600160a01b031614806128fd57506128e8612682565b6001600160a01b0316336001600160a01b0316145b61293d576040805162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b612949600183836145d2565b507f3e46ff90086ee29856e77591e82c82ff8ed513379b0fd82e84fc5290dd633c99828260405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a15050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156110b057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116129e8575050505050905090565b6005546001600160a01b03163314612a585760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6112c0838383613acf565b6008546001600160a01b0316612a77613140565b6001600160a01b031614612abc5760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b612ac8600083836145d2565b507f13c98778b0c1a086bb98d7f1986e15788b5d3a1ad4c492e1d78f1c4cc51c20cf828260405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a15050565b606060098054806020026020016040519081016040528092919081815260200182805480156110b0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116129e8575050505050905090565b6007546001600160a01b031690565b6005546001600160a01b03163314612be55760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6000612bef6121e6565b6001600160a01b031663296102526040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612c2957600080fd5b505af1158015612c3d573d6000803e3d6000fd5b505050506040513d6020811015612c5357600080fd5b5051905080612c625750612ca8565b612c73612c6d612caa565b82613844565b6040805182815290517f390f4e733d9d6104fbfb7508fdaf57640ea4179603e995d21027fda40e2576979181900360200190a1505b565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b7f000000000000000000000000000000000000000000000000000000000000000090565b6005546001600160a01b03163314612d665760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b611bde8282612ea4565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b038316612dfd5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b066024913960400191505060405180910390fd5b6001600160a01b038216612e425760405162461bcd60e51b81526004018080602001828103825260228152602001806147016022913960400191505060405180910390fd5b6001600160a01b03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038216612ee95760405162461bcd60e51b81526004018080602001828103825260218152602001806149e26021913960400191505060405180910390fd5b612f26816040518060600160405280602281526020016146ae602291396001600160a01b0385166000908152600360205260409020549190613c21565b6001600160a01b038316600090815260036020526040902055600254612f4c9082613c7b565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112c0908490613ca0565b612fee6117a5565b1561305d5760055460408051631f3abfcf60e31b81526001600160a01b0386811660048301529151919092169163f9d5fe78916024808301926000929190829003018186803b15801561304057600080fd5b505afa158015613054573d6000803e3d6000fd5b505050506112c0565b60055460408051630979029360e11b81526001600160a01b038681166004830152858116602483015260448201859052915191909216916312f2052691606480830192600092919082900301818387803b1580156130ba57600080fd5b505af11580156130ce573d6000803e3d6000fd5b50505050505050565b60006130e4848484613acf565b6131368433613131856040518060600160405280602881526020016148ff602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190613c21565b612db8565b5060019392505050565b60006018361080159061316b5750613156611eb0565b6001600160a01b0316336001600160a01b0316145b1561317f575060131936013560601c611021565b503390565b611b8881806020019051602081101561319c57600080fd5b5051613d51565b611b888180602001905160208110156131bb57600080fd5b505161373b565b60008060008380602001905160608110156131dc57600080fd5b508051602082015160409092015190945090925090506131fd838383613df2565b50505050565b60008082806020019051604081101561321b57600080fd5b50805160209091015190925090506112c08282612ea4565b60006060806060808580602001905160a081101561325057600080fd5b815160208301805160405192949293830192919084600160201b82111561327657600080fd5b90830190602082018581111561328b57600080fd5b8251600160201b8111828201881017156132a457600080fd5b82525081516020918201929091019080838360005b838110156132d15781810151838201526020016132b9565b50505050905090810190601f1680156132fe5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b82111561332057600080fd5b90830190602082018581111561333557600080fd5b82518660208202830111600160201b8211171561335157600080fd5b82525081516020918201928201910280838360005b8381101561337e578181015183820152602001613366565b5050505090500160405260200180516040519392919084600160201b8211156133a657600080fd5b9083019060208201858111156133bb57600080fd5b82518660208202830111600160201b821117156133d757600080fd5b82525081516020918201928201910280838360005b838110156134045781810151838201526020016133ec565b5050505090500160405260200180516040519392919084600160201b82111561342c57600080fd5b90830190602082018581111561344157600080fd5b82518660208202830111600160201b8211171561345d57600080fd5b82525081516020918201928201910280838360005b8381101561348a578181015183820152602001613472565b50505050905001604052505050945094509450945094506134ae8585858585613eff565b505050505050565b6000808280602001905160408110156134ce57600080fd5b50805160209091015190925090506112c08282613844565b611b888180602001905160208110156134fe57600080fd5b5051614077565b611b8881806020019051602081101561351d57600080fd5b50516140e8565b600080600083806020019051606081101561353e57600080fd5b508051602082015160409092015190945090925090506131fd838383613acf565b600080600083806020019051606081101561357957600080fd5b508051602082015160409092015190945090925090506131fd838383613680565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d357600080fd5b505afa1580156135e7573d6000803e3d6000fd5b505050506040513d60208110156135fd57600080fd5b50517f027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a51461365c5760405162461bcd60e51b81526004018080602001828103825260318152602001806146d06031913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b826001600160a01b0381163014156136d6576040805162461bcd60e51b815260206004820152601460248201527343616e6e6f7420616374206f6e2073686172657360601b604482015290519081900360640190fd5b6136ea6001600160a01b0385168484612f94565b826001600160a01b0316846001600160a01b03167f6f9cbac839b826cc524f53d10416c053fce34ec15fd1001720e777cc49720e76846040518082815260200191505060405180910390a350505050565b806001600160a01b038116301415613791576040805162461bcd60e51b815260206004820152601460248201527343616e6e6f7420616374206f6e2073686172657360601b604482015290519081900360640190fd5b61379a82612289565b611bde576137a6614161565b6001600160a01b0382166000818152600a60209081526040808320805460ff191660019081179091556009805491820181559093527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b03191684179055815192835290517fa0d2bfad19dc0c6970d2a2fcff65458a6d7c4fa3b6d904f44961b2c744bdf5919281900390910190a15050565b6001600160a01b03821661389f576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6002546138ac90826141ac565b6002556001600160a01b0382166000908152600360205260409020546138d290826141ac565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03811661396f5760405162461bcd60e51b815260040180806020018281038252602c815260200180614a63602c913960400191505060405180910390fd5b600580546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517fb5a9def940973a936e331170816650368964b0602957d4bc60f5ddc2dc1b69cd929181900390910190a15050565b6001600160a01b038116613a175760405162461bcd60e51b81526004018080602001828103825260268152602001806147756026913960400191505060405180910390fd5b6008546001600160a01b03908116908216811415613a665760405162461bcd60e51b815260040180806020018281038252602b81526020018061494a602b913960400191505060405180910390fd5b600880546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a7359281900390910190a15050565b60006110c73384845b6001600160a01b038316613b145760405162461bcd60e51b8152600401808060200182810382526025815260200180614a3e6025913960400191505060405180910390fd5b6001600160a01b038216613b595760405162461bcd60e51b815260040180806020018281038252602381526020018061468b6023913960400191505060405180910390fd5b613b968160405180606001604052806026815260200161474f602691396001600160a01b0386166000908152600360205260409020549190613c21565b6001600160a01b038085166000908152600360205260408082209390935590841681522054613bc590826141ac565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115613c735760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156127e75781810151838201526020016127cf565b505050900390565b60006112e083836040518060600160405280602681526020016147e960269139613c21565b6060613cf5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166141f09092919063ffffffff16565b8051909150156112c057808060200190516020811015613d1457600080fd5b50516112c05760405162461bcd60e51b815260040180806020018281038252602a815260200180614b2a602a913960400191505060405180910390fd5b613d5a81611fac565b611b8857613d66614161565b6001600160a01b0381166000818152600e6020526040808220805460ff19166001908117909155600c8054918201815583527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b03191684179055517f07524f5de87a754cb09f25965c3355b50dfece5fa624111739d5bf5caa05ebe69190a250565b826001600160a01b038116301415613e48576040805162461bcd60e51b815260206004820152601460248201527343616e6e6f7420616374206f6e2073686172657360601b604482015290519081900360640190fd5b60408051636eb1769f60e11b81523060048201526001600160a01b038581166024830152915186926000929084169163dd62ed3e91604480820192602092909190829003018186803b158015613e9d57600080fd5b505afa158015613eb1573d6000803e3d6000fd5b505050506040513d6020811015613ec757600080fd5b50511115613ee457613ee46001600160a01b0382168560006141ff565b613ef86001600160a01b03821685856141ff565b5050505050565b613f0885611fac565b613f435760405162461bcd60e51b8152600401808060200182810382526039815260200180614acd6039913960400191505060405180910390fd5b60005b8351811015613f8857613f80848281518110613f5e57fe5b602002602001015187858481518110613f7357fe5b6020026020010151613680565b600101613f46565b5060405163e5c23a9760e01b81526020600482018181528651602484015286516001600160a01b0389169363e5c23a979389939283926044019185019080838360005b83811015613fe3578181015183820152602001613fcb565b50505050905090810190601f1680156140105780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561402f57600080fd5b505af1158015614043573d6000803e3d6000fd5b5050505060005b81518110156134ae5761406f82828151811061406257fe5b602002602001015161373b565b60010161404a565b61408081611fac565b15611b88576001600160a01b0381166000908152600e60205260409020805460ff191690556140b0600c82614312565b506040516001600160a01b038216907f5af401380f7c5a87ba294191b430d5c1c6dcc133c1d774c092cb0d6a52e20bef90600090a250565b6140f181612289565b15611b88576001600160a01b0381166000908152600a60205260409020805460ff19169055614121600982614312565b50604080516001600160a01b038316815290517f22c4fcf23b40d39b02733ec19a3975b31172f2a5b2ce5d0f1831525276cd71569181900360200190a150565b614169612d94565b600c546009540110612ca85760405162461bcd60e51b815260040180806020018281038252602881526020018061479b6028913960400191505060405180910390fd5b6000828201838110156112e05760405162461bcd60e51b81526004018080602001828103825260238152602001806149276023913960400191505060405180910390fd5b60606112dd848460008561440a565b801580614285575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561425757600080fd5b505afa15801561426b573d6000803e3d6000fd5b505050506040513d602081101561428157600080fd5b5051155b6142c05760405162461bcd60e51b8152600401808060200182810382526036815260200180614ba76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526112c0908490613ca0565b8154600090815b8181101561440257836001600160a01b031685828154811061433757fe5b6000918252602090912001546001600160a01b031614156143fa57600182038110156143c55784600183038154811061436c57fe5b9060005260206000200160009054906101000a90046001600160a01b031685828154811061439657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b848054806143cf57fe5b600082815260209020810160001990810180546001600160a01b031916905501905560019250614402565b600101614319565b505092915050565b60608247101561444b5760405162461bcd60e51b81526004018080602001828103825260268152602001806147c36026913960400191505060405180910390fd5b61445485614566565b6144a5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106144e45780518252601f1990920191602091820191016144c5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614546576040519150601f19603f3d011682016040523d82523d6000602084013e61454b565b606091505b509150915061455b82828661456c565b979650505050505050565b3b151590565b6060831561457b5750816112e0565b82511561458b5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156127e75781810151838201526020016127cf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106146135782800160ff19823516178555614640565b82800160010185558215614640579182015b82811115614640578235825591602001919060010190614625565b5061464c929150614650565b5090565b5b8082111561464c576000815560010161465156fe4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e6374696f6e45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63655f5f757064617465436f6465416464726573733a205f6e6578745661756c744c6962206e6f7420636f6d70617469626c6545524332303a20617070726f766520746f20746865207a65726f206164647265737361646441737365744d616e61676572733a204d616e6167657220616c7265616479207265676973746572656445524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655f5f7365744f776e65723a205f6e6578744f776e65722063616e6e6f7420626520656d7074795f5f76616c6964617465506f736974696f6e734c696d69743a204c696d6974206578636565646564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5661756c744c6962536166654d6174683a207375627472616374696f6e206f766572666c6f7772656d6f76654e6f6d696e617465644f776e65723a205468657265206973206e6f206e6f6d696e61746564206f776e65727365744e6f6d696e617465644f776e65723a205f6e6578744e6f6d696e617465644f776e65722063616e6e6f7420626520656d7074797365745661756c744c69623a204f6e6c792063616c6c61626c652062792074686520636f6e74726163742063726561746f724f6e6c79207468652046756e644465706c6f7965722063616e206d616b6520746869732063616c6c4f6e6c79207468652064657369676e61746564206163636573736f722063616e206d616b6520746869732063616c6c45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655661756c744c6962536166654d6174683a206164646974696f6e206f766572666c6f775f5f7365744f776e65723a205f6e6578744f776e6572206973207468652063757272656e74206f776e65727365744e6f6d696e617465644f776e65723a205f6e6578744e6f6d696e617465644f776e657220697320616c726561647920746865206f776e65727365744163636573736f723a204f6e6c792063616c6c61626c652062792074686520636f6e74726163742063726561746f7245524332303a206275726e2066726f6d20746865207a65726f20616464726573737365744e6f6d696e617465644f776e65723a205f6e6578744e6f6d696e617465644f776e657220697320616c7265616479206e6f6d696e6174656445524332303a207472616e736665722066726f6d20746865207a65726f20616464726573735f5f7365744163636573736f723a205f6e6578744163636573736f722063616e6e6f7420626520656d707479636c61696d4f776e6572736869703a204f6e6c7920746865206e6f6d696e617465644f776e65722063616e2063616c6c20746869732066756e6374696f6e5f5f63616c6c4f6e45787465726e616c506f736974696f6e3a204e6f7420616e206163746976652065787465726e616c20706f736974696f6e45524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564736574467265656c795472616e7366657261626c655368617265733a20416c72656164792073657472656d6f766541737365744d616e61676572733a204d616e61676572206e6f7420726567697374657265645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122069c58842a75386288b5ec95b2806f300d397abc3049c14be985eb7255d502bcc64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106103855760003560e01c8063728e17a0116101d1578063ac25945611610102578063cd63d578116100a0578063e70e605e1161006f578063e70e605e14610f87578063ee7a7c0414610f9c578063fe15c02a14610fd5578063ff3cdf5614610fea57610420565b8063cd63d57814610f0d578063d5c20fa214610f22578063da41962e14610f37578063dd62ed3e14610f4c57610420565b8063b8b7f147116100dc578063b8b7f14714610dd5578063bfc77beb14610e3a578063c47f002714610e7d578063c4b9737014610ef857610420565b8063ac25945614610d30578063b3fc38e914610d45578063b84c824614610d5a57610420565b80638156eecf1161016f57806397c0ac871161014957806397c0ac8714610c24578063a9059cbb14610c39578063a90cce4b14610c72578063ab9253ac14610cfd57610420565b80638156eecf14610be5578063893d20e814610bfa57806395d89b4114610c0f57610420565b806375d8bb0e116101ab57806375d8bb0e14610b40578063797ed33914610b6a5780637c81ac2d14610b9d5780637de07cea14610bb257610420565b8063728e17a014610ac5578063740f2b5a14610af8578063749cc8f514610b2b57610420565b8063495d753c116102b65780635c9a6d37116102545780636ea21143116102235780636ea2114314610a1757806370a0823114610a2c578063712bd10214610a5f578063714ca2d114610a9257610420565b80635c9a6d37146108c05780636487aa111461095457806364cb36cb14610987578063682cea1914610a0257610420565b80634ef0762e116102905780634ef0762e1461082a578063528c198a1461085d57806352d1902d146108965780635a53e348146108ab57610420565b8063495d753c146107bd5780634c252f91146108005780634e71e0c81461081557610420565b806324e6001211610323578063313ce567116102fd578063313ce567146106b157806336861889146106dc5780633e11553d1461070f5780634140d6071461078a57610420565b806324e6001214610602578063288b6a361461068757806328c2ad9c1461069c57610420565b806318160ddd1161035f57806318160ddd1461052d5780631ff46bfa1461055457806323b872dd1461058c57806323cf3118146105cf57610420565b806306fdde0314610425578063095ea7b3146104af5780630ee2cb10146104fc57610420565b36610420573031610394610fff565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b50506040805185815290513394507f85177f287940f2f05425a4029951af0e047a7f9c4eaa9a6e6917bcd869f866959350908190036020019150a250005b600080fd5b34801561043157600080fd5b5061043a611024565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561047457818101518382015260200161045c565b50505050905090810190601f1680156104a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104bb57600080fd5b506104e8600480360360408110156104d257600080fd5b506001600160a01b0381351690602001356110ba565b604080519115158252519081900360200190f35b34801561050857600080fd5b506105116110d0565b604080516001600160a01b039092168252519081900360200190f35b34801561053957600080fd5b506105426110df565b60408051918252519081900360200190f35b34801561056057600080fd5b5061058a6004803603606081101561057757600080fd5b50803590602081013590604001356110e5565b005b34801561059857600080fd5b506104e8600480360360608110156105af57600080fd5b506001600160a01b038135811691602081013590911690604001356112c5565b3480156105db57600080fd5b5061058a600480360360208110156105f257600080fd5b50356001600160a01b03166112e7565b34801561060e57600080fd5b5061058a6004803603604081101561062557600080fd5b60ff8235169190810190604081016020820135600160201b81111561064957600080fd5b82018360208201111561065b57600080fd5b803590602001918460018302840111600160201b8311171561067c57600080fd5b509092509050611405565b34801561069357600080fd5b50610511611791565b3480156106a857600080fd5b506104e86117a5565b3480156106bd57600080fd5b506106c66117ae565b6040805160ff9092168252519081900360200190f35b3480156106e857600080fd5b506104e8600480360360208110156106ff57600080fd5b50356001600160a01b03166117b3565b34801561071b57600080fd5b5061058a6004803603602081101561073257600080fd5b810190602081018135600160201b81111561074c57600080fd5b82018360208201111561075e57600080fd5b803590602001918460208302840111600160201b8311171561077f57600080fd5b509092509050611809565b34801561079657600080fd5b5061058a600480360360208110156107ad57600080fd5b50356001600160a01b0316611989565b3480156107c957600080fd5b5061058a600480360360608110156107e057600080fd5b506001600160a01b03813581169160208101359091169060400135611a30565b34801561080c57600080fd5b50610511610fff565b34801561082157600080fd5b5061058a611a84565b34801561083657600080fd5b5061058a6004803603602081101561084d57600080fd5b50356001600160a01b0316611b36565b34801561086957600080fd5b5061058a6004803603604081101561088057600080fd5b506001600160a01b038135169060200135611b8b565b3480156108a257600080fd5b50610542611be2565b3480156108b757600080fd5b50610511611c06565b3480156108cc57600080fd5b5061058a600480360360608110156108e357600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561091657600080fd5b82018360208201111561092857600080fd5b803590602001918460018302840111600160201b8311171561094957600080fd5b509092509050611c15565b34801561096057600080fd5b506104e86004803603602081101561097757600080fd5b50356001600160a01b0316611d03565b34801561099357600080fd5b5061058a600480360360208110156109aa57600080fd5b810190602081018135600160201b8111156109c457600080fd5b8201836020820111156109d657600080fd5b803590602001918460208302840111600160201b831117156109f757600080fd5b509092509050611d21565b348015610a0e57600080fd5b50610511611e8b565b348015610a2357600080fd5b50610511611eb0565b348015610a3857600080fd5b5061054260048036036020811015610a4f57600080fd5b50356001600160a01b0316611f91565b348015610a6b57600080fd5b506104e860048036036020811015610a8257600080fd5b50356001600160a01b0316611fac565b348015610a9e57600080fd5b506104e860048036036020811015610ab557600080fd5b50356001600160a01b0316611fca565b348015610ad157600080fd5b5061058a60048036036020811015610ae857600080fd5b50356001600160a01b0316611ff7565b348015610b0457600080fd5b5061058a60048036036020811015610b1b57600080fd5b50356001600160a01b0316612186565b348015610b3757600080fd5b506105116121e6565b348015610b4c57600080fd5b5061051160048036036020811015610b6357600080fd5b503561220a565b348015610b7657600080fd5b506104e860048036036020811015610b8d57600080fd5b50356001600160a01b0316612289565b348015610ba957600080fd5b5061058a6122a7565b348015610bbe57600080fd5b506104e860048036036020811015610bd557600080fd5b50356001600160a01b031661237c565b348015610bf157600080fd5b5061058a6123ab565b348015610c0657600080fd5b50610511612499565b348015610c1b57600080fd5b5061043a6124a8565b348015610c3057600080fd5b50610511612682565b348015610c4557600080fd5b506104e860048036036040811015610c5c57600080fd5b506001600160a01b0381351690602001356126cd565b348015610c7e57600080fd5b5061043a60048036036040811015610c9557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610cbf57600080fd5b820183602082011115610cd157600080fd5b803590602001918460018302840111600160201b83111715610cf257600080fd5b5090925090506126e4565b348015610d0957600080fd5b5061058a60048036036020811015610d2057600080fd5b50356001600160a01b031661282b565b348015610d3c57600080fd5b50610511612874565b348015610d5157600080fd5b50610511612898565b348015610d6657600080fd5b5061058a60048036036020811015610d7d57600080fd5b810190602081018135600160201b811115610d9757600080fd5b820183602082011115610da957600080fd5b803590602001918460018302840111600160201b83111715610dca57600080fd5b5090925090506128bc565b348015610de157600080fd5b50610dea6129ae565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610e26578181015183820152602001610e0e565b505050509050019250505060405180910390f35b348015610e4657600080fd5b5061058a60048036036060811015610e5d57600080fd5b506001600160a01b03813581169160208101359091169060400135612a0f565b348015610e8957600080fd5b5061058a60048036036020811015610ea057600080fd5b810190602081018135600160201b811115610eba57600080fd5b820183602082011115610ecc57600080fd5b803590602001918460018302840111600160201b83111715610eed57600080fd5b509092509050612a63565b348015610f0457600080fd5b50610dea612b2d565b348015610f1957600080fd5b50610511612b8d565b348015610f2e57600080fd5b5061058a612b9c565b348015610f4357600080fd5b50610511612caa565b348015610f5857600080fd5b5061054260048036036040811015610f6f57600080fd5b506001600160a01b0381358116916020013516612cce565b348015610f9357600080fd5b50610511612cf9565b348015610fa857600080fd5b5061058a60048036036040811015610fbf57600080fd5b506001600160a01b038135169060200135612d1d565b348015610fe157600080fd5b50610511612d70565b348015610ff657600080fd5b50610542612d94565b7f00000000000000000000000000000000000000000000000000000000000000005b90565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156110b05780601f10611085576101008083540402835291602001916110b0565b820191906000526020600020905b81548152906001019060200180831161109357829003601f168201915b5050505050905090565b60006110c7338484612db8565b50600192915050565b6006546001600160a01b031690565b60025490565b6005546001600160a01b0316331461112e5760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6000611138612caa565b6001600160a01b03166396c45aec8585856040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050602060405180830381600087803b15801561118d57600080fd5b505af11580156111a1573d6000803e3d6000fd5b505050506040513d60208110156111b757600080fd5b50519050806111c657506112c0565b6111d76111d1612caa565b85612ea4565b60006111e1612d70565b6001600160a01b0316141561125a576111f8612cf9565b6001600160a01b03166342966c68826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561123d57600080fd5b505af1158015611251573d6000803e3d6000fd5b5050505061127e565b61127e611265612d70565b8261126e612cf9565b6001600160a01b03169190612f94565b604080518581526020810185905280820183905290517ff8c67da77ed4cb50a4dec91c60cf78ee219033bd3c55a86d133178c557c2d2cf9181900360600190a1505b505050565b60006112d2848484612fe6565b6112dd8484846130d7565b90505b9392505050565b6008546001600160a01b03166112fb613140565b6001600160a01b0316146113405760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b6007546001600160a01b039081169082168114156113a5576040805162461bcd60e51b815260206004820152601e60248201527f7365744d69677261746f723a2056616c756520616c7265616479207365740000604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f9d0761a1fa4d686cd87f8dbf8ca52f90cf19c3c4dc36e66ebbf08fc5ba203f2c9281900390910190a15050565b6005546001600160a01b0316331461144e5760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b600883600a81111561145c57fe5b14156114a6576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061318492505050565b6112c0565b600483600a8111156114b457fe5b14156114f9576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131a392505050565b600583600a81111561150757fe5b141561154c576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131c292505050565b600183600a81111561155a57fe5b141561159f576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061320392505050565b600983600a8111156115ad57fe5b14156115f2576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061323392505050565b600283600a81111561160057fe5b1415611645576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134b692505050565b600a83600a81111561165357fe5b1415611698576114a182828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506134e692505050565b600683600a8111156116a657fe5b14156116eb576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061350592505050565b600383600a8111156116f957fe5b141561173e576114a182828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061352492505050565b600783600a81111561174c57fe5b14156112c0576112c082828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061355f92505050565b600b5461010090046001600160a01b031690565b600b5460ff1690565b601290565b60006117bd612499565b6001600160a01b0316826001600160a01b031614806117e057506117e082611d03565b8061180357506117ee612b8d565b6001600160a01b0316826001600160a01b0316145b92915050565b6008546001600160a01b031661181d613140565b6001600160a01b0316146118625760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b60005b818110156112c05761189183838381811061187c57fe5b905060200201356001600160a01b0316611d03565b156118cd5760405162461bcd60e51b815260040180806020018281038252602c815260200180614723602c913960400191505060405180910390fd5b6001600d60008585858181106118df57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f8cf4dd2d46ca2e74b9cc238f9e9c907b5a6a50e2f652162a062d5e8129f35d7a83838381811061195357fe5b905060200201356001600160a01b031660405180826001600160a01b0316815260200191505060405180910390a1600101611865565b6006546001600160a01b031633146119d25760405162461bcd60e51b81526004018080602001828103825260328152602001806148766032913960400191505060405180910390fd5b60006119dc611e8b565b90506119e78261359a565b604080516001600160a01b0380841682528416602082015281517fe504a0278c9d64c1a72d2f528a0c5e3686e093fcd478b3b1224a5c6983207df6929181900390910190a15050565b6005546001600160a01b03163314611a795760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6112c0838383613680565b600b5461010090046001600160a01b0316338114611ad35760405162461bcd60e51b815260040180806020018281038252603e815260200180614a8f603e913960400191505060405180910390fd5b600b8054610100600160a81b0319169055600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6005546001600160a01b03163314611b7f5760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b611b888161373b565b50565b6005546001600160a01b03163314611bd45760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b611bde8282613844565b5050565b7f027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a590565b6005546001600160a01b031690565b6006546001600160a01b031615611c73576040805162461bcd60e51b815260206004820152601f60248201527f696e69743a2050726f787920616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600680546001600160a01b03191633179055611c91600083836145d2565b50611c9b8361392a565b611ca4846139d2565b7fe504a0278c9d64c1a72d2f528a0c5e3686e093fcd478b3b1224a5c6983207df66000611ccf611e8b565b60405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390a150505050565b6001600160a01b03166000908152600d602052604090205460ff1690565b6008546001600160a01b0316611d35613140565b6001600160a01b031614611d7a5760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b60005b818110156112c057611d9483838381811061187c57fe5b611dcf5760405162461bcd60e51b815260040180806020018281038252602b815260200180614b7c602b913960400191505060405180910390fd5b6000600d6000858585818110611de157fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f1a3f6d43a85364a6a2d8297f0cd634e060a6ef9bc11b3a0c89e47d40b89c2f7e838383818110611e5557fe5b905060200201356001600160a01b031660405180826001600160a01b0316815260200191505060405180910390a1600101611d7d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6000611eba612874565b6001600160a01b03166398a7c4c76040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef257600080fd5b505afa158015611f06573d6000803e3d6000fd5b505050506040513d6020811015611f1c57600080fd5b505160408051637da0a87760e01b815290516001600160a01b0390921691637da0a87791600480820192602092909190829003018186803b158015611f6057600080fd5b505afa158015611f74573d6000803e3d6000fd5b505050506040513d6020811015611f8a57600080fd5b5051905090565b6001600160a01b031660009081526003602052604090205490565b6001600160a01b03166000908152600e602052604090205460ff1690565b6000611fd4612499565b6001600160a01b0316826001600160a01b03161480611803575061180382611d03565b6008546001600160a01b031661200b613140565b6001600160a01b0316146120505760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b6001600160a01b0381166120955760405162461bcd60e51b81526004018080602001828103825260368152602001806148406036913960400191505060405180910390fd5b6008546001600160a01b03828116911614156120e25760405162461bcd60e51b815260040180806020018281038252603b815260200180614975603b913960400191505060405180910390fd5b600b546001600160a01b038281166101009092041614156121345760405162461bcd60e51b815260040180806020018281038252603b815260200180614a03603b913960400191505060405180910390fd5b600b8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040517f132c19de901bb4ed8403c34734b6c841d5dc57745824da452a52433519ea5abf90600090a250565b61218e612682565b6001600160a01b0316336001600160a01b0316146121dd5760405162461bcd60e51b81526004018080602001828103825260288152602001806148a86028913960400191505060405180910390fd5b611b888161392a565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000612214612898565b6001600160a01b03166375d8bb0e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561225757600080fd5b505afa15801561226b573d6000803e3d6000fd5b505050506040513d602081101561228157600080fd5b505192915050565b6001600160a01b03166000908152600a602052604090205460ff1690565b6008546001600160a01b03166122bb613140565b6001600160a01b0316146123005760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b6123086117a5565b156123445760405162461bcd60e51b8152600401808060200182810382526028815260200180614b546028913960400191505060405180910390fd5b600b805460ff191660011790556040517f505ab4202e673074a7b93ec3c2ca442c3526a42232835c56d223bd09672c5b0d90600090a1565b6008546000906001600160a01b03838116911614806118035750506007546001600160a01b0390811691161490565b6008546001600160a01b03166123bf613140565b6001600160a01b0316146124045760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b600b5461010090046001600160a01b0316806124515760405162461bcd60e51b815260040180806020018281038252603181526020018061480f6031913960400191505060405180910390fd5b600b8054610100600160a81b03191690556040516001600160a01b038216907fe4136584a5e8bb85d66301f3ce8b11cc2e5a8bea3979f10ea2451353849acc4790600090a250565b6008546001600160a01b031690565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156125335780601f1061250857610100808354040283529160200191612533565b820191906000526020600020905b81548152906001019060200180831161251657829003601f168201915b5050505050905080516000141561102157600660009054906101000a90046001600160a01b03166001600160a01b031663b47b06006040518163ffffffff1660e01b815260040160006040518083038186803b15801561259257600080fd5b505afa1580156125a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156125cf57600080fd5b8101908080516040519392919084600160201b8211156125ee57600080fd5b90830190602082018581111561260357600080fd5b8251600160201b81118282018810171561261c57600080fd5b82525081516020918201929091019080838360005b83811015612649578181015183820152602001612631565b50505050905090810190601f1680156126765780820380516001836020036101000a031916815260200191505b50604052505050905090565b600654604080516307af8e9f60e31b815230600482015290516000926001600160a01b031691633d7c74f8916024808301926020929190829003018186803b158015611f6057600080fd5b60006126da338484612fe6565b6112e08383613ac6565b6005546060906001600160a01b031633146127305760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6000846001600160a01b03168484604051808383808284376040519201945060009350909150508083038183865af19150503d806000811461278e576040519150601f19603f3d011682016040523d82523d6000602084013e612793565b606091505b509250905081816128225760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127e75781810151838201526020016127cf565b50505050905090810190601f1680156128145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50509392505050565b6006546001600160a01b031633146121dd5760405162461bcd60e51b81526004018080602001828103825260328152602001806149b06032913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6008546001600160a01b03166128d0613140565b6001600160a01b031614806128fd57506128e8612682565b6001600160a01b0316336001600160a01b0316145b61293d576040805162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b612949600183836145d2565b507f3e46ff90086ee29856e77591e82c82ff8ed513379b0fd82e84fc5290dd633c99828260405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a15050565b6060600c8054806020026020016040519081016040528092919081815260200182805480156110b057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116129e8575050505050905090565b6005546001600160a01b03163314612a585760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6112c0838383613acf565b6008546001600160a01b0316612a77613140565b6001600160a01b031614612abc5760405162461bcd60e51b81526004018080602001828103825260258152602001806146666025913960400191505060405180910390fd5b612ac8600083836145d2565b507f13c98778b0c1a086bb98d7f1986e15788b5d3a1ad4c492e1d78f1c4cc51c20cf828260405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a15050565b606060098054806020026020016040519081016040528092919081815260200182805480156110b0576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116129e8575050505050905090565b6007546001600160a01b031690565b6005546001600160a01b03163314612be55760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b6000612bef6121e6565b6001600160a01b031663296102526040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612c2957600080fd5b505af1158015612c3d573d6000803e3d6000fd5b505050506040513d6020811015612c5357600080fd5b5051905080612c625750612ca8565b612c73612c6d612caa565b82613844565b6040805182815290517f390f4e733d9d6104fbfb7508fdaf57640ea4179603e995d21027fda40e2576979181900360200190a1505b565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b7f000000000000000000000000000000000000000000000000000000000000000090565b6005546001600160a01b03163314612d665760405162461bcd60e51b815260040180806020018281038252602f8152602001806148d0602f913960400191505060405180910390fd5b611bde8282612ea4565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b038316612dfd5760405162461bcd60e51b8152600401808060200182810382526024815260200180614b066024913960400191505060405180910390fd5b6001600160a01b038216612e425760405162461bcd60e51b81526004018080602001828103825260228152602001806147016022913960400191505060405180910390fd5b6001600160a01b03808416600081815260046020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038216612ee95760405162461bcd60e51b81526004018080602001828103825260218152602001806149e26021913960400191505060405180910390fd5b612f26816040518060600160405280602281526020016146ae602291396001600160a01b0385166000908152600360205260409020549190613c21565b6001600160a01b038316600090815260036020526040902055600254612f4c9082613c7b565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526112c0908490613ca0565b612fee6117a5565b1561305d5760055460408051631f3abfcf60e31b81526001600160a01b0386811660048301529151919092169163f9d5fe78916024808301926000929190829003018186803b15801561304057600080fd5b505afa158015613054573d6000803e3d6000fd5b505050506112c0565b60055460408051630979029360e11b81526001600160a01b038681166004830152858116602483015260448201859052915191909216916312f2052691606480830192600092919082900301818387803b1580156130ba57600080fd5b505af11580156130ce573d6000803e3d6000fd5b50505050505050565b60006130e4848484613acf565b6131368433613131856040518060600160405280602881526020016148ff602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190613c21565b612db8565b5060019392505050565b60006018361080159061316b5750613156611eb0565b6001600160a01b0316336001600160a01b0316145b1561317f575060131936013560601c611021565b503390565b611b8881806020019051602081101561319c57600080fd5b5051613d51565b611b888180602001905160208110156131bb57600080fd5b505161373b565b60008060008380602001905160608110156131dc57600080fd5b508051602082015160409092015190945090925090506131fd838383613df2565b50505050565b60008082806020019051604081101561321b57600080fd5b50805160209091015190925090506112c08282612ea4565b60006060806060808580602001905160a081101561325057600080fd5b815160208301805160405192949293830192919084600160201b82111561327657600080fd5b90830190602082018581111561328b57600080fd5b8251600160201b8111828201881017156132a457600080fd5b82525081516020918201929091019080838360005b838110156132d15781810151838201526020016132b9565b50505050905090810190601f1680156132fe5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b82111561332057600080fd5b90830190602082018581111561333557600080fd5b82518660208202830111600160201b8211171561335157600080fd5b82525081516020918201928201910280838360005b8381101561337e578181015183820152602001613366565b5050505090500160405260200180516040519392919084600160201b8211156133a657600080fd5b9083019060208201858111156133bb57600080fd5b82518660208202830111600160201b821117156133d757600080fd5b82525081516020918201928201910280838360005b838110156134045781810151838201526020016133ec565b5050505090500160405260200180516040519392919084600160201b82111561342c57600080fd5b90830190602082018581111561344157600080fd5b82518660208202830111600160201b8211171561345d57600080fd5b82525081516020918201928201910280838360005b8381101561348a578181015183820152602001613472565b50505050905001604052505050945094509450945094506134ae8585858585613eff565b505050505050565b6000808280602001905160408110156134ce57600080fd5b50805160209091015190925090506112c08282613844565b611b888180602001905160208110156134fe57600080fd5b5051614077565b611b8881806020019051602081101561351d57600080fd5b50516140e8565b600080600083806020019051606081101561353e57600080fd5b508051602082015160409092015190945090925090506131fd838383613acf565b600080600083806020019051606081101561357957600080fd5b508051602082015160409092015190945090925090506131fd838383613680565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135d357600080fd5b505afa1580156135e7573d6000803e3d6000fd5b505050506040513d60208110156135fd57600080fd5b50517f027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a51461365c5760405162461bcd60e51b81526004018080602001828103825260318152602001806146d06031913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b826001600160a01b0381163014156136d6576040805162461bcd60e51b815260206004820152601460248201527343616e6e6f7420616374206f6e2073686172657360601b604482015290519081900360640190fd5b6136ea6001600160a01b0385168484612f94565b826001600160a01b0316846001600160a01b03167f6f9cbac839b826cc524f53d10416c053fce34ec15fd1001720e777cc49720e76846040518082815260200191505060405180910390a350505050565b806001600160a01b038116301415613791576040805162461bcd60e51b815260206004820152601460248201527343616e6e6f7420616374206f6e2073686172657360601b604482015290519081900360640190fd5b61379a82612289565b611bde576137a6614161565b6001600160a01b0382166000818152600a60209081526040808320805460ff191660019081179091556009805491820181559093527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b03191684179055815192835290517fa0d2bfad19dc0c6970d2a2fcff65458a6d7c4fa3b6d904f44961b2c744bdf5919281900390910190a15050565b6001600160a01b03821661389f576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6002546138ac90826141ac565b6002556001600160a01b0382166000908152600360205260409020546138d290826141ac565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03811661396f5760405162461bcd60e51b815260040180806020018281038252602c815260200180614a63602c913960400191505060405180910390fd5b600580546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517fb5a9def940973a936e331170816650368964b0602957d4bc60f5ddc2dc1b69cd929181900390910190a15050565b6001600160a01b038116613a175760405162461bcd60e51b81526004018080602001828103825260268152602001806147756026913960400191505060405180910390fd5b6008546001600160a01b03908116908216811415613a665760405162461bcd60e51b815260040180806020018281038252602b81526020018061494a602b913960400191505060405180910390fd5b600880546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a7359281900390910190a15050565b60006110c73384845b6001600160a01b038316613b145760405162461bcd60e51b8152600401808060200182810382526025815260200180614a3e6025913960400191505060405180910390fd5b6001600160a01b038216613b595760405162461bcd60e51b815260040180806020018281038252602381526020018061468b6023913960400191505060405180910390fd5b613b968160405180606001604052806026815260200161474f602691396001600160a01b0386166000908152600360205260409020549190613c21565b6001600160a01b038085166000908152600360205260408082209390935590841681522054613bc590826141ac565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115613c735760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156127e75781810151838201526020016127cf565b505050900390565b60006112e083836040518060600160405280602681526020016147e960269139613c21565b6060613cf5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166141f09092919063ffffffff16565b8051909150156112c057808060200190516020811015613d1457600080fd5b50516112c05760405162461bcd60e51b815260040180806020018281038252602a815260200180614b2a602a913960400191505060405180910390fd5b613d5a81611fac565b611b8857613d66614161565b6001600160a01b0381166000818152600e6020526040808220805460ff19166001908117909155600c8054918201815583527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b03191684179055517f07524f5de87a754cb09f25965c3355b50dfece5fa624111739d5bf5caa05ebe69190a250565b826001600160a01b038116301415613e48576040805162461bcd60e51b815260206004820152601460248201527343616e6e6f7420616374206f6e2073686172657360601b604482015290519081900360640190fd5b60408051636eb1769f60e11b81523060048201526001600160a01b038581166024830152915186926000929084169163dd62ed3e91604480820192602092909190829003018186803b158015613e9d57600080fd5b505afa158015613eb1573d6000803e3d6000fd5b505050506040513d6020811015613ec757600080fd5b50511115613ee457613ee46001600160a01b0382168560006141ff565b613ef86001600160a01b03821685856141ff565b5050505050565b613f0885611fac565b613f435760405162461bcd60e51b8152600401808060200182810382526039815260200180614acd6039913960400191505060405180910390fd5b60005b8351811015613f8857613f80848281518110613f5e57fe5b602002602001015187858481518110613f7357fe5b6020026020010151613680565b600101613f46565b5060405163e5c23a9760e01b81526020600482018181528651602484015286516001600160a01b0389169363e5c23a979389939283926044019185019080838360005b83811015613fe3578181015183820152602001613fcb565b50505050905090810190601f1680156140105780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561402f57600080fd5b505af1158015614043573d6000803e3d6000fd5b5050505060005b81518110156134ae5761406f82828151811061406257fe5b602002602001015161373b565b60010161404a565b61408081611fac565b15611b88576001600160a01b0381166000908152600e60205260409020805460ff191690556140b0600c82614312565b506040516001600160a01b038216907f5af401380f7c5a87ba294191b430d5c1c6dcc133c1d774c092cb0d6a52e20bef90600090a250565b6140f181612289565b15611b88576001600160a01b0381166000908152600a60205260409020805460ff19169055614121600982614312565b50604080516001600160a01b038316815290517f22c4fcf23b40d39b02733ec19a3975b31172f2a5b2ce5d0f1831525276cd71569181900360200190a150565b614169612d94565b600c546009540110612ca85760405162461bcd60e51b815260040180806020018281038252602881526020018061479b6028913960400191505060405180910390fd5b6000828201838110156112e05760405162461bcd60e51b81526004018080602001828103825260238152602001806149276023913960400191505060405180910390fd5b60606112dd848460008561440a565b801580614285575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561425757600080fd5b505afa15801561426b573d6000803e3d6000fd5b505050506040513d602081101561428157600080fd5b5051155b6142c05760405162461bcd60e51b8152600401808060200182810382526036815260200180614ba76036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526112c0908490613ca0565b8154600090815b8181101561440257836001600160a01b031685828154811061433757fe5b6000918252602090912001546001600160a01b031614156143fa57600182038110156143c55784600183038154811061436c57fe5b9060005260206000200160009054906101000a90046001600160a01b031685828154811061439657fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b848054806143cf57fe5b600082815260209020810160001990810180546001600160a01b031916905501905560019250614402565b600101614319565b505092915050565b60608247101561444b5760405162461bcd60e51b81526004018080602001828103825260268152602001806147c36026913960400191505060405180910390fd5b61445485614566565b6144a5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106144e45780518252601f1990920191602091820191016144c5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614546576040519150601f19603f3d011682016040523d82523d6000602084013e61454b565b606091505b509150915061455b82828661456c565b979650505050505050565b3b151590565b6060831561457b5750816112e0565b82511561458b5782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156127e75781810151838201526020016127cf565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106146135782800160ff19823516178555614640565b82800160010185558215614640579182015b82811115614640578235825591602001919060010190614625565b5061464c929150614650565b5090565b5b8082111561464c576000815560010161465156fe4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e6374696f6e45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63655f5f757064617465436f6465416464726573733a205f6e6578745661756c744c6962206e6f7420636f6d70617469626c6545524332303a20617070726f766520746f20746865207a65726f206164647265737361646441737365744d616e61676572733a204d616e6167657220616c7265616479207265676973746572656445524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655f5f7365744f776e65723a205f6e6578744f776e65722063616e6e6f7420626520656d7074795f5f76616c6964617465506f736974696f6e734c696d69743a204c696d6974206578636565646564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5661756c744c6962536166654d6174683a207375627472616374696f6e206f766572666c6f7772656d6f76654e6f6d696e617465644f776e65723a205468657265206973206e6f206e6f6d696e61746564206f776e65727365744e6f6d696e617465644f776e65723a205f6e6578744e6f6d696e617465644f776e65722063616e6e6f7420626520656d7074797365745661756c744c69623a204f6e6c792063616c6c61626c652062792074686520636f6e74726163742063726561746f724f6e6c79207468652046756e644465706c6f7965722063616e206d616b6520746869732063616c6c4f6e6c79207468652064657369676e61746564206163636573736f722063616e206d616b6520746869732063616c6c45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655661756c744c6962536166654d6174683a206164646974696f6e206f766572666c6f775f5f7365744f776e65723a205f6e6578744f776e6572206973207468652063757272656e74206f776e65727365744e6f6d696e617465644f776e65723a205f6e6578744e6f6d696e617465644f776e657220697320616c726561647920746865206f776e65727365744163636573736f723a204f6e6c792063616c6c61626c652062792074686520636f6e74726163742063726561746f7245524332303a206275726e2066726f6d20746865207a65726f20616464726573737365744e6f6d696e617465644f776e65723a205f6e6578744e6f6d696e617465644f776e657220697320616c7265616479206e6f6d696e6174656445524332303a207472616e736665722066726f6d20746865207a65726f20616464726573735f5f7365744163636573736f723a205f6e6578744163636573736f722063616e6e6f7420626520656d707479636c61696d4f776e6572736869703a204f6e6c7920746865206e6f6d696e617465644f776e65722063616e2063616c6c20746869732066756e6374696f6e5f5f63616c6c4f6e45787465726e616c506f736974696f6e3a204e6f7420616e206163746976652065787465726e616c20706f736974696f6e45524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564736574467265656c795472616e7366657261626c655368617265733a20416c72656164792073657472656d6f766541737365744d616e61676572733a204d616e61676572206e6f7420726567697374657265645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122069c58842a75386288b5ec95b2806f300d397abc3049c14be985eb7255d502bcc64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "The difference in terminology between \"asset\" and \"trackedAsset\" is intentional. A fund might actually have asset balances of un-tracked assets, but only tracked assets are used in gav calculations. Note that this contract inherits VaultLibSafeMath (a verbatim Open Zeppelin SafeMath copy) from SharesTokenBase via VaultLibBase2",
    "kind": "dev",
    "methods": {
      "addAssetManagers(address[])": {
        "params": {
          "_managers": "The accounts to add as asset managers"
        }
      },
      "addTrackedAsset(address)": {
        "params": {
          "_asset": "The asset to add as a tracked asset"
        }
      },
      "allowance(address,address)": {
        "details": "Standard implementation of ERC20's allowance(). Can be overridden."
      },
      "approve(address,uint256)": {
        "details": "Standard implementation of ERC20's approve(). Can be overridden."
      },
      "balanceOf(address)": {
        "details": "Standard implementation of ERC20's balanceOf(). Can be overridden."
      },
      "burnShares(address,uint256)": {
        "params": {
          "_amount": "The amount of shares to burn",
          "_target": "The account for which to burn shares"
        }
      },
      "buyBackProtocolFeeShares(uint256,uint256,uint256)": {
        "details": "Since the vault controls both the MLN to burn and the admin function to burn any user's fund shares, there is no need to transfer assets back-and-forth with the ProtocolFeeReserve. We only need to know the correct discounted amount of MLN to burn.",
        "params": {
          "_gav": "The total fund GAV",
          "_mlnValue": "The MLN-denominated market value of _sharesAmount",
          "_sharesAmount": "The amount of shares to buy back"
        }
      },
      "callOnContract(address,bytes)": {
        "params": {
          "_callData": "The call data for the call",
          "_contract": "The contract to call"
        },
        "returns": {
          "returnData_": "The data returned by the call"
        }
      },
      "canManageAssets(address)": {
        "params": {
          "_who": "The account to check"
        },
        "returns": {
          "canManageAssets_": "True if the account can manage assets"
        }
      },
      "canMigrate(address)": {
        "params": {
          "_who": "The account to check"
        },
        "returns": {
          "canMigrate_": "True if the account is allowed to migrate the VaultProxy"
        }
      },
      "canRelayCalls(address)": {
        "params": {
          "_who": "The account to check"
        },
        "returns": {
          "canRelayCalls_": "True if the account can use gas relaying on this fund"
        }
      },
      "decimals()": {
        "details": "Standard implementation of ERC20's decimals(). Can not be overridden."
      },
      "getAccessor()": {
        "returns": {
          "accessor_": "The `accessor` variable value"
        }
      },
      "getActiveExternalPositions()": {
        "returns": {
          "activeExternalPositions_": "The `activeExternalPositions` variable value"
        }
      },
      "getCreator()": {
        "returns": {
          "creator_": "The `creator` variable value"
        }
      },
      "getExternalPositionLibForType(uint256)": {
        "params": {
          "_typeId": "The type for which to get the external position library"
        },
        "returns": {
          "externalPositionLib_": "The external position library"
        }
      },
      "getExternalPositionManager()": {
        "returns": {
          "externalPositionManager_": "The `EXTERNAL_POSITION_MANAGER` variable value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The fund deployer contract associated with this vault"
        }
      },
      "getGasRelayPaymasterFactory()": {
        "returns": {
          "gasRelayPaymasterFactory_": "The `GAS_RELAY_PAYMASTER_FACTORY` variable value"
        }
      },
      "getGasRelayTrustedForwarder()": {
        "returns": {
          "trustedForwarder_": "The trusted forwarder"
        }
      },
      "getMigrator()": {
        "returns": {
          "migrator_": "The `migrator` variable value"
        }
      },
      "getMlnBurner()": {
        "returns": {
          "mlnBurner_": "The `MLN_BURNER` variable value"
        }
      },
      "getMlnToken()": {
        "returns": {
          "mlnToken_": "The `MLN_TOKEN` variable value"
        }
      },
      "getNominatedOwner()": {
        "returns": {
          "nominatedOwner_": "The account that is nominated to be the owner"
        }
      },
      "getOwner()": {
        "returns": {
          "owner_": "The `owner` variable value"
        }
      },
      "getPositionsLimit()": {
        "returns": {
          "positionsLimit_": "The `POSITIONS_LIMIT` variable value"
        }
      },
      "getProtocolFeeReserve()": {
        "returns": {
          "protocolFeeReserve_": "The `PROTOCOL_FEE_RESERVE` variable value"
        }
      },
      "getProtocolFeeTracker()": {
        "returns": {
          "protocolFeeTracker_": "The `PROTOCOL_FEE_TRACKER` variable value"
        }
      },
      "getTrackedAssets()": {
        "returns": {
          "trackedAssets_": "The `trackedAssets` variable value"
        }
      },
      "getVaultLib()": {
        "returns": {
          "vaultLib_": "The address of the VaultLib target"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      },
      "init(address,address,string)": {
        "details": "Serves as a per-proxy pseudo-constructor",
        "params": {
          "_accessor": "The address to set as the permissioned accessor of the VaultLib",
          "_fundName": "The name of the fund",
          "_owner": "The address to set as the fund owner"
        }
      },
      "isActiveExternalPosition(address)": {
        "params": {
          "_externalPosition": "The externalPosition to check"
        },
        "returns": {
          "isActiveExternalPosition_": "True if the address is an active external position on the vault"
        }
      },
      "isAssetManager(address)": {
        "params": {
          "_who": "The account to check"
        },
        "returns": {
          "isAssetManager_": "True if the account is an allowed asset manager"
        }
      },
      "isTrackedAsset(address)": {
        "params": {
          "_asset": "The address to check"
        },
        "returns": {
          "isTrackedAsset_": "True if the address is a tracked asset"
        }
      },
      "mintShares(address,uint256)": {
        "params": {
          "_amount": "The amount of shares to mint",
          "_target": "The account for which to burn shares"
        }
      },
      "name()": {
        "details": "Standard implementation of ERC20's name(). Can be overridden."
      },
      "proxiableUUID()": {
        "details": "The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`",
        "returns": {
          "uuid_": "The bytes32 hash representing the UUID"
        }
      },
      "receiveValidatedVaultAction(uint8,bytes)": {
        "params": {
          "_action": "The VaultAction to perform",
          "_actionData": "The call data for the action to perform"
        }
      },
      "removeAssetManagers(address[])": {
        "params": {
          "_managers": "The accounts to remove as asset managers"
        }
      },
      "setAccessor(address)": {
        "params": {
          "_nextAccessor": "The address to set as the permissioned accessor of the VaultLib"
        }
      },
      "setAccessorForFundReconfiguration(address)": {
        "params": {
          "_nextAccessor": "The next accessor"
        }
      },
      "setFreelyTransferableShares()": {
        "details": "Once set, this can never be allowed to be unset, as it provides a critical transferability guarantee to liquidity pools and other smart contract holders that rely on transfers to function properly. Enabling this option will skip all policies run upon transferring shares, but will still respect the shares action timelock."
      },
      "setMigrator(address)": {
        "details": "Set to address(0) to remove the migrator.",
        "params": {
          "_nextMigrator": "The account to set as the allowed migrator"
        }
      },
      "setName(string)": {
        "details": "Owners should consider the implications of changing an ERC20 name post-deployment, e.g., some apps/dapps may cache token names for display purposes, so changing the name in contract state may not be reflected in third party applications as desired.",
        "params": {
          "_nextName": "The next name value"
        }
      },
      "setNominatedOwner(address)": {
        "details": "Does not prohibit overwriting the current nominatedOwner",
        "params": {
          "_nextNominatedOwner": "The account to nominate"
        }
      },
      "setSymbol(string)": {
        "details": "Owners should consider the implications of changing an ERC20 symbol post-deployment, e.g., some apps/dapps may cache token symbols for display purposes, so changing the symbol in contract state may not be reflected in third party applications as desired. Only callable by the FundDeployer during vault creation or by the vault owner.",
        "params": {
          "_nextSymbol": "The next symbol value"
        }
      },
      "setVaultLib(address)": {
        "details": "This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextVaultLib from being the same as the current VaultLib",
        "params": {
          "_nextVaultLib": "The address to set as the VaultLib"
        }
      },
      "sharesAreFreelyTransferable()": {
        "returns": {
          "sharesAreFreelyTransferable_": "True if shares are (permanently) freely transferable"
        }
      },
      "symbol()": {
        "details": "Defers the shares symbol value to the Dispatcher contract if not set locally",
        "returns": {
          "symbol_": "The `symbol` value"
        }
      },
      "totalSupply()": {
        "details": "Standard implementation of ERC20's totalSupply(). Can be overridden."
      },
      "transfer(address,uint256)": {
        "details": "Standard implementation of ERC20's transfer(). Overridden to allow arbitrary logic in ComptrollerProxy prior to transfer."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Standard implementation of ERC20's transferFrom(). Overridden to allow arbitrary logic in ComptrollerProxy prior to transfer."
      },
      "transferShares(address,address,uint256)": {
        "details": "For protocol use only, all other transfers should operate via standard ERC20 functions",
        "params": {
          "_amount": "The amount of shares to transfer",
          "_from": "The account from which to transfer shares",
          "_to": "The account to which to transfer shares"
        }
      },
      "withdrawAssetTo(address,address,uint256)": {
        "params": {
          "_amount": "The amount of asset to withdraw",
          "_asset": "The asset to withdraw",
          "_target": "The account to which to withdraw the asset"
        }
      }
    },
    "title": "VaultLib Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAssetManagers(address[])": {
        "notice": "Registers accounts that can manage vault holdings within the protocol"
      },
      "addTrackedAsset(address)": {
        "notice": "Adds a tracked asset"
      },
      "burnShares(address,uint256)": {
        "notice": "Burns fund shares from a particular account"
      },
      "buyBackProtocolFeeShares(uint256,uint256,uint256)": {
        "notice": "Buys back shares collected as protocol fee at a discounted shares price, using MLN"
      },
      "callOnContract(address,bytes)": {
        "notice": "Makes an arbitrary call with this contract as the sender"
      },
      "canManageAssets(address)": {
        "notice": "Checks whether an account can manage assets"
      },
      "canMigrate(address)": {
        "notice": "Checks whether an account is allowed to migrate the VaultProxy"
      },
      "canRelayCalls(address)": {
        "notice": "Checks whether an account can use gas relaying"
      },
      "claimOwnership()": {
        "notice": "Claim ownership of the contract"
      },
      "getAccessor()": {
        "notice": "Gets the `accessor` variable"
      },
      "getActiveExternalPositions()": {
        "notice": "Gets the `activeExternalPositions` variable"
      },
      "getCreator()": {
        "notice": "Gets the `creator` variable"
      },
      "getExternalPositionLibForType(uint256)": {
        "notice": "Gets the external position library contract for a given type"
      },
      "getExternalPositionManager()": {
        "notice": "Gets the `EXTERNAL_POSITION_MANAGER` variable"
      },
      "getFundDeployer()": {
        "notice": "Gets the vaults fund deployer"
      },
      "getGasRelayPaymasterFactory()": {
        "notice": "Gets the `GAS_RELAY_PAYMASTER_FACTORY` variable"
      },
      "getGasRelayTrustedForwarder()": {
        "notice": "Gets the trusted forwarder for GSN relaying"
      },
      "getMigrator()": {
        "notice": "Gets the `migrator` variable"
      },
      "getMlnBurner()": {
        "notice": "Gets the `MLN_BURNER` variable"
      },
      "getMlnToken()": {
        "notice": "Gets the `MLN_TOKEN` variable"
      },
      "getNominatedOwner()": {
        "notice": "Gets the account that is nominated to be the next owner of this contract"
      },
      "getOwner()": {
        "notice": "Gets the `owner` variable"
      },
      "getPositionsLimit()": {
        "notice": "Gets the `POSITIONS_LIMIT` variable"
      },
      "getProtocolFeeReserve()": {
        "notice": "Gets the `PROTOCOL_FEE_RESERVE` variable"
      },
      "getProtocolFeeTracker()": {
        "notice": "Gets the `PROTOCOL_FEE_TRACKER` variable"
      },
      "getTrackedAssets()": {
        "notice": "Gets the `trackedAssets` variable"
      },
      "getVaultLib()": {
        "notice": "Gets the VaultLib target for the VaultProxy"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable"
      },
      "init(address,address,string)": {
        "notice": "Initializes the VaultProxy with core configuration"
      },
      "isActiveExternalPosition(address)": {
        "notice": "Check whether an external position is active on the vault"
      },
      "isAssetManager(address)": {
        "notice": "Checks whether an account is an allowed asset manager"
      },
      "isTrackedAsset(address)": {
        "notice": "Checks whether an address is a tracked asset of the vault"
      },
      "mintShares(address,uint256)": {
        "notice": "Mints fund shares to a particular account"
      },
      "payProtocolFee()": {
        "notice": "Pays the due protocol fee by minting shares to the ProtocolFeeReserve"
      },
      "proxiableUUID()": {
        "notice": "Returns a unique bytes32 hash for VaultLib instances"
      },
      "receiveValidatedVaultAction(uint8,bytes)": {
        "notice": "Dispatches a call initiated from an Extension, validated by the ComptrollerProxy"
      },
      "removeAssetManagers(address[])": {
        "notice": "Deregisters accounts that can manage vault holdings within the protocol"
      },
      "removeNominatedOwner()": {
        "notice": "Revoke the nomination of a new contract owner"
      },
      "setAccessor(address)": {
        "notice": "Sets the permissioned accessor of the VaultLib"
      },
      "setAccessorForFundReconfiguration(address)": {
        "notice": "Updates the accessor during a config change within this release"
      },
      "setFreelyTransferableShares()": {
        "notice": "Sets shares as (permanently) freely transferable"
      },
      "setMigrator(address)": {
        "notice": "Sets the account that is allowed to migrate a fund to new releases"
      },
      "setName(string)": {
        "notice": "Sets the shares name"
      },
      "setNominatedOwner(address)": {
        "notice": "Nominate a new contract owner"
      },
      "setSymbol(string)": {
        "notice": "Sets the shares token symbol"
      },
      "setVaultLib(address)": {
        "notice": "Sets the VaultLib target for the VaultProxy"
      },
      "sharesAreFreelyTransferable()": {
        "notice": "Checks whether shares are (permanently) freely transferable"
      },
      "symbol()": {
        "notice": "Gets the `symbol` value of the shares token"
      },
      "transferShares(address,address,uint256)": {
        "notice": "Transfers fund shares from one account to another"
      },
      "withdrawAssetTo(address,address,uint256)": {
        "notice": "Withdraws an asset from the VaultProxy to a given account"
      }
    },
    "notice": "The per-release proxiable library contract for VaultProxy",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8867,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "sharesName",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 8869,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "sharesSymbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 8871,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "sharesTotalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8875,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "sharesBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8881,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "sharesAllowances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8507,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "accessor",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8509,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "creator",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8511,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "migrator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8513,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8384,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "trackedAssets",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8388,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "assetToIsTracked",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8455,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "freelyTransferableShares",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 8457,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "nominatedOwner",
        "offset": 1,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 8460,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "activeExternalPositions",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8464,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "accountToIsAssetManager",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8468,
        "contract": "contracts/release/core/fund/vault/VaultLib.sol:VaultLib",
        "label": "externalPositionToIsActive",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}